scn aaZefirosPrepMerge

;Main script
;-----------------------------------------------------------------------------
;aaZefirosManager
;-----------------------------------------------------------------------------

;Used scripts
;-----------------------------------------------------------------------------
;aaZefirosGetMerg
;-----------------------------------------------------------------------------

;Related scripts
;-----------------------------------------------------------------------------
;-----------------------------------------------------------------------------

;Used globals
;-----------------------------------------------------------------------------
;-----------------------------------------------------------------------------

;Related globals
;-----------------------------------------------------------------------------
;aaZefirosSlotBody
;aaZefirosSlotFoot
;aaZefirosSlotHand
;aaZefirosSlotHead
;aaZefirosSlotLegs
;aaZefirosSlotShld
;-----------------------------------------------------------------------------

;Description
;-----------------------------------------------------------------------------
;Checks if any items are merged according to the slot masks and returns them
;to the Player in preparation for calling SetMerge after game load.
;-----------------------------------------------------------------------------

;Parameters
;-----------------------------------------------------------------------------
array_var Armr
array_var Dflt
array_var Mask

ref Item
ref Temp
array_var Merg
array_var Iter
array_var Stack
short Count
short i
short j
long Slot
float MHP
float CHP
float HP
;-----------------------------------------------------------------------------

;-----------------------------------------------------------------------------
begin Function { Mask, Dflt, Armr }
;-----------------------------------------------------------------------------

	;Set Count to smallest array size
	if eval( (ar_Size Dflt) < (ar_Size Armr) )
		Let Count := ar_Size Dflt
	else
		Let Count := ar_Size Armr
	endif
	if eval( Count > (ar_Size Mask) )
		Let Count := ar_Size Mask
	endif


	;-----------------------------------------------------------------------------
	DebugPrint "Checking for missing items needed for merging..."
	;-----------------------------------------------------------------------------
	Let i := 0
	while ( i < Count )
	;-----------------------------------------------------------------------------

		;Get indexes for merged items
		Let Merg := Call aaZefirosGetMerg Mask[i] Dflt

		;-----------------------------------------------------------------------------
		;Correct and preserve durability percentage
		;-----------------------------------------------------------------------------
		Let Item := Armr[i]
		Let Stack := Player.GetInvRefsForItem Item
		
		if eval( (ar_Size Stack) > 0 )

			;Get current durability value
			Let Item := Stack[0]
			Let CHP := Item.GetCurrentHealth

			;Calculate max durability value while merged
			Let MHP := 0
			ForEach Iter <- Merg

				Let j := *Iter
				Let Temp := Armr[j]
				Let MHP += GetObjectHealth Temp

			loop

			;Get durability percentage while merged
			Let HP := CHP / MHP

			;Set Item's durability percentage
			Let MHP := GetObjectHealth Item
			Let CHP := HP * MHP
			Item.SetCurrentHealth CHP
		
		else ;Item is not in Player's inventory

			;No idea where Item can be, assume 100% durability
			Let HP := 1.00
			
		endif

		
		;-----------------------------------------------------------------------------
		;Add merged items to player
		;-----------------------------------------------------------------------------
		ForEach Iter <- Merg

			Let j := *Iter
			Let Item := Armr[j]

			;Only add if not already present, accounts for nested merges
			if ( i != j && 0 == Player.GetItemCount Item )

				;Use a TempRef to set durability percentage
				Let Temp := CreateTempRef Item
				Let MHP := GetObjectHealth Item
				Let CHP := HP * MHP
				Temp.SetRefCount 1
				Temp.SetCurrentHealth CHP
				Temp.CopyIR Player
				
				DebugPrint "Returned %n." Item

			endif

		loop

	;-----------------------------------------------------------------------------
		Let i += 1
	loop
	;-----------------------------------------------------------------------------
	DebugPrint "Missing items returned."
	;-----------------------------------------------------------------------------

	
	;-----------------------------------------------------------------------------
	DebugPrint "Resetting slot masks."
	;-----------------------------------------------------------------------------
	Let i := 0
	while ( i < Count )

		Let Slot := Dflt[i]
		Let Item := Armr[i]

		SetBipedSlotMask Slot Item

		Let i += 1
	loop

	
	Return
;-----------------------------------------------------------------------------
end ;Function { Mask, Dflt, Armr }
;-----------------------------------------------------------------------------