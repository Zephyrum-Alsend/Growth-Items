scn aaZefirosGetBroken

;Main script
;-----------------------------------------------------------------------------
;aaZefirosManager
;-----------------------------------------------------------------------------

;Used scripts
;-----------------------------------------------------------------------------
;-----------------------------------------------------------------------------

;Related scripts
;-----------------------------------------------------------------------------
;-----------------------------------------------------------------------------

;Used globals
;-----------------------------------------------------------------------------
;-----------------------------------------------------------------------------

;Related globals
;-----------------------------------------------------------------------------
;-----------------------------------------------------------------------------

;Description
;-----------------------------------------------------------------------------
;Given a Container and an Object, returns the number of Object broken within
;Container's inventory.
;-----------------------------------------------------------------------------

;Parameters
;-----------------------------------------------------------------------------
ref Container
ref Object

short Broke ;Return value
short Count
short i
array_var Stack
ref Item
;-----------------------------------------------------------------------------

;-----------------------------------------------------------------------------
begin Function { Container, Object }
;-----------------------------------------------------------------------------
	
	Let Broke := 0 ;Number of items broken
	
	Let Stack := Container.GetInvRefsForItem Object
	Let Count := ar_Size Stack

	Let i := 0
	while ( i < Count )

		Let Item := Stack[i]

		if ( Item.GetCurrentHealth <= 0 )

			;Each InvRef points to a stack, not an individual item
			Let Broke += Item.GetRefCount

		endif

		Let i += 1
	loop


	SetFunctionValue Broke
	Return
;-----------------------------------------------------------------------------
end ;Function { Container, Object }
;-----------------------------------------------------------------------------