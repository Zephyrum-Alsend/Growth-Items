scn aaZefirosManager

;The quest this is attached to, 
;and therefore this script, 
;run every this second(s).
float fQuestDelayTime



;Main script
;-----------------------------------------------------------------------------
;aaZefirosManager
;-----------------------------------------------------------------------------

;Used scripts
;-----------------------------------------------------------------------------
;aaZefirosCleanUp
;aaZefirosDefualtINI
;aaZefirosEnchantBox
;aaZefirosFlagCleanOnce
;aaZefirosFlagEnchantOnce
;aaZefirosFlagSigilOnce
;aaZefirosFlavorBox
;aaZefirosFlavorMessage
;aaZefirosIncrementEnchant
;aaZefirosLogLevel
;aaZefirosLogXP
;aaZefirosModEnchLevel
;aaZefirosModStat
;aaZefirosOffer
;aaZefirosOnEnchanting
;aaZefirosPrepMerge
;aaZefirosRefreshEquip
;aaZefirosRefreshUnEquip
;aaZefirosRemoveAllEffectItems
;aaZefirosReorderEffects
;aaZefirosSacrifice
;aaZefirosSaveMimic
;aaZefirosUndoEnchant
;aaZefirosValidateMimic
;aaZefirosGetArmorStats
;aaZefirosGetBroken
;aaZefirosGetDefaultSlot
;aaZefirosGetDurability
;aaZefirosGetEnchantData
;aaZefirosGetEnchantLevels
;aaZefirosGetEnchChoice
;aaZefirosGetFormData
;aaZefirosGetPCBIP
;aaZefirosGetResistMatrix
;aaZefirosGetSlots
;aaZefirosGetXPReq
;aaZefirosSetDurability
;aaZefirosSetEnchant
;aaZefirosSetEnchOnItem
;aaZefirosSetEquipHandlers
;aaZefirosSetForm
;aaZefirosSetLevelCap
;aaZefirosSetMerge
;aaZefirosSetMimic
;aaZefirosSetName
;aaZefirosSetResistEffects
;aaZefirosSetSeek
;aaZefirosSetSeekArray
;aaZefirosSetStat
;aaZefirosSetWeight
;-----------------------------------------------------------------------------

;Related scripts
;-----------------------------------------------------------------------------
;aaZefirosDamageAnalysis
;-----------------------------------------------------------------------------

;Used globals
;-----------------------------------------------------------------------------
;aaZefirosDebug
;aaZefirosMimicBodySlot
;aaZefirosMimicFootSlot
;aaZefirosMimicHandSlot
;aaZefirosMimicHeadSlot
;aaZefirosMimicLegsSlot
;aaZefirosMimicShldSlot
;aaZefirosLevel
;aaZefirosWeightBody
;aaZefirosWeightFoot
;aaZefirosWeightHand
;aaZefirosWeightHead
;aaZefirosWeightLegs
;aaZefirosWeightShld
;aaZefirosFormBody
;aaZefirosFormFoot
;aaZefirosFormHand
;aaZefirosFormHead
;aaZefirosFormLegs
;aaZefirosFormShld
;aaZefirosSlotBody
;aaZefirosSlotFoot
;aaZefirosSlotHand
;aaZefirosSlotHead
;aaZefirosSlotLegs
;aaZefirosSlotShld
;aaZefirosBroken
;aaZefirosActvEnchBody
;aaZefirosActvEnchFoot
;aaZefirosActvEnchHand
;aaZefirosActvEnchHead
;aaZefirosActvEnchLegs
;aaZefirosActvEnchShld
;aaZefirosRXPFire
;aaZefirosRXPFrost
;aaZefirosRXPShock
;aaZefirosRXPMagic
;aaZefirosRXPNormal
;aaZefirosRXPParalysis
;aaZefirosRXPDisease
;aaZefirosXPLog
;aaZefirosXP
;aaZefirosXPCombat
;aaZefirosXPReq
;-----------------------------------------------------------------------------

;Related globals
;-----------------------------------------------------------------------------
;-----------------------------------------------------------------------------

;Description
;-----------------------------------------------------------------------------
;Main script of Zefiros.
;-----------------------------------------------------------------------------

;Engine objects
;-----------------------------------------------------------------------------
;Items	>	Armor >			DLScalar4Body
;							DLScalar4Foot
;							DLScalar4Hand
;							DLScalar4Head
;							DLScarar4Legs
;							DLScalar4Shld
;Items >	Clothing >		DLRefr
;Magic >	Enchantment >	DLScalar4BodyEnch
;							DLScalar4FootEnch
;							DLScalar4HandEnch
;							DLScalar4HeadEnch
;							DLScarar4LegsEnch
;							DLScalar4ShldEnch
;-----------------------------------------------------------------------------

;Parameters
;-----------------------------------------------------------------------------
;References to ArmorID and EnchantID
;-----------------------------------------------------------------------------
ref SelfBody
ref SelfFoot
ref SelfHand
ref SelfHead
ref SelfLegs
ref SelfShld

ref EnchBody
ref EnchFoot
ref EnchHand
ref EnchHead
ref EnchLegs
ref EnchShld

;-----------------------------------------------------------------------------
;Armor variables
;-----------------------------------------------------------------------------
short sBodyARBase
short sFootARBase
short sHandARBase
short sHeadARBase
short sLegsARBase
short sShldARBase

float fBodyWeightBase
float fFootWeightBase
float fHandWeightBase
float fHeadWeightBase
float fLegsWeightBase
float fShldWeightBase

short sBodyHealthBase
short sFootHealthBase
short sHandHealthBase
short sHeadHealthBase
short sLegsHealthBase
short sShldHealthBase

long lBodyValueBase
long lFootValueBase
long lHandValueBase
long lHeadValueBase
long lLegsValueBase
long lShldValueBase

short sBodyARMult
short sFootARMult
short sHandARMult
short sHeadARMult
short sLegsARMult
short sShldARMult

float fBodyWeightMult
float fFootWeightMult
float fHandWeightMult
float fHeadWeightMult
float fLegsWeightMult
float fShldWeightMult

float fBodyHealthMult
float fFootHealthMult
float fHandHealthMult
float fHeadHealthMult
float fLegsHealthMult
float fShldHealthMult

float fBodyValueMult
float fFootValueMult
float fHandValueMult
float fHeadValueMult
float fLegsValueMult
float fShldValueMult

;-----------------------------------------------------------------------------
;Weight adjustment variables
;-----------------------------------------------------------------------------
float fHeavyAR
float fHeavyWeight

;-----------------------------------------------------------------------------
;Level up variables
;-----------------------------------------------------------------------------
short sXPReqBase
short sXPReqMult
short sXPResist
short sXPPara
float sXPDisease
short sXPNoDmg
short sLevelCap
short sCapType
short sBreakLevel
short sBreakThreshold
float fAbsorption

short CombatXP
float XPReqHalf
short Level
short Cap

;-----------------------------------------------------------------------------
;Enchantment variables
;-----------------------------------------------------------------------------
short sEnchStart
short sEnchSeek
short sEnchResist

short sFOATBase
float fFOATMult

short sFOSKBase
float fFOSKMult

short sFOFABase
float fFOFAMult

short sFOHEBase
float fFOHEMult

short sFOSPBase
float fFOSPMult

short sREFABase
float fREFAMult

short sREHEBase
float fREHEMult

short sRESPBase
float fRESPMult

short sSHLDBase
float fSHLDMult

short sFTHRBase
float fFTHRMult

short sREDGBase
float fREDGMult

short sRFLCBase
float fRFLCMult

short sSABSBase
float fSABSMult

;-----------------------------------------------------------------------------
;Keybinds
;-----------------------------------------------------------------------------
short sFormKey1
short sFormKey2
short sFormKey3
short sEnchKey1
short sEnchKey2
short sEnchKey3
short sNameKey1
short sNameKey2
short sNameKey3
short sOffrKey1
short sOffrKey2
short sOffrKey3
short sCopyKey1
short sCopyKey2
short sCopyKey3

short sFormBut1
short sFormBut2
short sEnchBut1
short sEnchBut2
short sNameBut1
short sNameBut2
short sOffrBut1
short sOffrBut2
short sCopyBut1
short sCopyBut2

;-----------------------------------------------------------------------------
;Mimic variables
;-----------------------------------------------------------------------------
string_var MimicBodyMaleModel
string_var MimicBodyFemaleModel
string_var MimicBodyMaleGround
string_var MimicBodyFemaleGround
string_var MimicBodyMaleIcon
string_var MimicBodyFemaleIcon
string_var MimicBodyName

string_var MimicFootMaleModel
string_var MimicFootFemaleModel
string_var MimicFootMaleGround
string_var MimicFootFemaleGround
string_var MimicFootMaleIcon
string_var MimicFootFemaleIcon
string_var MimicFootName

string_var MimicHandMaleModel
string_var MimicHandFemaleModel
string_var MimicHandMaleGround
string_var MimicHandFemaleGround
string_var MimicHandMaleIcon
string_var MimicHandFemaleIcon
string_var MimicHandName

string_var MimicHeadMaleModel
string_var MimicHeadFemaleModel
string_var MimicHeadMaleGround
string_var MimicHeadFemaleGround
string_var MimicHeadMaleIcon
string_var MimicHeadFemaleIcon
string_var MimicHeadName

string_var MimicLegsMaleModel
string_var MimicLegsFemaleModel
string_var MimicLegsMaleGround
string_var MimicLegsFemaleGround
string_var MimicLegsMaleIcon
string_var MimicLegsFemaleIcon
string_var MimicLegsName

string_var MimicShldMaleModel
string_var MimicShldFemaleModel
string_var MimicShldMaleGround
string_var MimicShldFemaleGround
string_var MimicShldMaleIcon
string_var MimicShldFemaleIcon
string_var MimicShldName

;-----------------------------------------------------------------------------
;Resistance variables
;-----------------------------------------------------------------------------
short ResistFI
short ResistFR
short ResistSH
short ResistMA
short ResistNW
short ResistPA
short ResistDI

short NewFI
short NewFR
short NewSH
short NewMA
short NewNW
short NewPA
short NewDI

;-----------------------------------------------------------------------------
;Latency variables
;-----------------------------------------------------------------------------
float ScriptLag
float MenuLag
float fDamageLag
float OneFrame

;-----------------------------------------------------------------------------
;Flags
;-----------------------------------------------------------------------------
short sBodyFix
short sFootFix
short sHandFix
short sHeadFix
short sLegsFix
short sShldFix

short HalfOnce
short CapOnce
short BreakOnce
short SeekOnce
short RefreshOnce
short CleanOnce
short SigilOnce
short EnchantOnce

short AltLag

short Menu

;-----------------------------------------------------------------------------
;Shorts
;-----------------------------------------------------------------------------
short Num
short Nmb
short i

;-----------------------------------------------------------------------------
;Longs
;-----------------------------------------------------------------------------
long j

;-----------------------------------------------------------------------------
;Strings
;-----------------------------------------------------------------------------
string_var str_Prefix
string_var str_Postfix
string_var str_BodyName
string_var str_FootName
string_var str_HandName
string_var str_HeadName
string_var str_LegsName
string_var str_ShldName
string_var MsgName
string_var ActvBody
string_var ActvFoot
string_var ActvHand
string_var ActvHead
string_var ActvLegs
string_var ActvShld

;-----------------------------------------------------------------------------
;Arrays
;-----------------------------------------------------------------------------
array_var Selfs
array_var Enchs
array_var EncSt
array_var ArmSt
array_var Forms
array_var Equip
array_var Seek
array_var Actv
array_var Slots
array_var Dflt
array_var Soul
array_var Stack
array_var Item

;-----------------------------------------------------------------------------
;References
;-----------------------------------------------------------------------------
ref Val
ref SigilItem
;-----------------------------------------------------------------------------





;-----------------------------------------------------------------------------
begin GameMode
;-----------------------------------------------------------------------------

	;-----------------------------------------------------------------------------
	;Initializer sub-block
	;-----------------------------------------------------------------------------
	if ( GetGameLoaded )
	;-----------------------------------------------------------------------------

		;-----------------------------------------------------------------------------
		;Initialize variables and arrays
		;-----------------------------------------------------------------------------
		;Armor refs
		Let SelfBody := DLScalar4Body
		Let SelfFoot := DLScalar4Foot
		Let SelfHand := DLScalar4Hand
		Let SelfHead := DLScalar4Head
		Let SelfLegs := DLScalar4Legs
		Let SelfShld := DLScalar4Shld

		;Enchantment refs
		Let EnchBody := DLScalar4BodyEnch
		Let EnchFoot := DLScalar4FootEnch
		Let EnchHand := DLScalar4HandEnch
		Let EnchHead := DLScalar4HeadEnch
		Let EnchLegs := DLScalar4LegsEnch
		Let EnchShld := DLScalar4ShldEnch

		;Initialize with default values
		Call aaZefirosDefaultINI

		;Initialize with user defined values
		RunBatchScript "Data\ini\Zefiros.ini"

		;Set debug mode
		SetDebugMode aaZefirosDebug

		;Clean up lingering data from last load
		Call aaZefirosCleanUp 1

		;Create arrays
		Let Selfs := ar_Construct Array
		ar_Append Selfs SelfBody
		ar_Append Selfs SelfFoot
		ar_Append Selfs SelfHand
		ar_Append Selfs SelfHead
		ar_Append Selfs SelfLegs
		ar_Append Selfs SelfShld

		Let Enchs := ar_Construct Array
		ar_Append Enchs EnchBody
		ar_Append Enchs EnchFoot
		ar_Append Enchs EnchHand
		ar_Append Enchs EnchHead
		ar_Append Enchs EnchLegs
		ar_Append Enchs EnchShld

		Let ArmSt := Call aaZefirosGetArmorStats
		Let EncSt := Call aaZefirosGetEnchantData
		Let Slots := Call aaZefirosGetSlots
		Let Dflt := Call aaZefirosGetDefaultSlot
		Let Soul := ar_Map 0::0 1::0 2::0 3::0

		Let Stack := ar_Construct Array
		Let Stack[0] := ar_Map 0::MimicBodyMaleModel 1::MimicBodyFemaleModel 2::MimicBodyMaleGround 3::MimicBodyFemaleGround 4::MimicBodyMaleIcon 5::MimicBodyFemaleIcon 6::MimicBodyName 7::aaZefirosMimicBodySlot
		Let Stack[1] := ar_Map 0::MimicFootMaleModel 1::MimicFootFemaleModel 2::MimicFootMaleGround 3::MimicFootFemaleGround 4::MimicFootMaleIcon 5::MimicFootFemaleIcon 6::MimicFootName 7::aaZefirosMimicFootSlot
		Let Stack[2] := ar_Map 0::MimicHandMaleModel 1::MimicHandFemaleModel 2::MimicHandMaleGround 3::MimicHandFemaleGround 4::MimicHandMaleIcon 5::MimicHandFemaleIcon 6::MimicHandName 7::aaZefirosMimicHandSlot
		Let Stack[3] := ar_Map 0::MimicHeadMaleModel 1::MimicHeadFemaleModel 2::MimicHeadMaleGround 3::MimicHeadFemaleGround 4::MimicHeadMaleIcon 5::MimicHeadFemaleIcon 6::MimicHeadName 7::aaZefirosMimicHeadSlot
		Let Stack[4] := ar_Map 0::MimicLegsMaleModel 1::MimicLegsFemaleModel 2::MimicLegsMaleGround 3::MimicLegsFemaleGround 4::MimicLegsMaleIcon 5::MimicLegsFemaleIcon 6::MimicLegsName 7::aaZefirosMimicLegsSlot
		Let Stack[5] := ar_Map 0::MimicShldMaleModel 1::MimicShldFemaleModel 2::MimicShldMaleGround 3::MimicShldFemaleGround 4::MimicShldMaleIcon 5::MimicShldFemaleIcon 6::MimicShldName 7::aaZefirosMimicShldSlot

		Let Stack := Call aaZefirosValidateMimic Selfs Stack
		Call aaZefirosSaveMimic Stack
		Let Forms := Call aaZefirosGetFormData Stack
		Let Stack := ar_Null
		
		;Set names
		Let str_BodyName := Call aaZefirosSetname str_Prefix str_Postfix sBodyFix str_BodyName
		Let str_FootName := Call aaZefirosSetname str_Prefix str_Postfix sFootFix str_FootName
		Let str_HandName := Call aaZefirosSetname str_Prefix str_Postfix sHandFix str_HandName
		Let str_HeadName := Call aaZefirosSetname str_Prefix str_Postfix sHeadFix str_HeadName
		Let str_LegsName := Call aaZefirosSetname str_Prefix str_Postfix sLegsFix str_LegsName
		Let str_ShldName := Call aaZefirosSetname str_Prefix str_Postfix sShldFix str_ShldName
		
		SetName $str_BodyName SelfBody
		SetName $str_FootName SelfFoot
		SetName $str_HandName SelfHand
		SetName $str_HeadName SelfHead
		SetName $str_LegsName SelfLegs
		SetName $str_ShldName SelfShld

		;Set collective name that appears in messages
		if ( 0 == sv_Length str_Prefix )

			DebugPrint "str_Prefix is empty, using str_Postfix."
			Let MsgName := "Armor " + str_Postfix

		else

			DebugPrint "Using str_Prefix."
			Let MsgName := str_Prefix

		endif

		;Set latency during GameMode/MenuMode
		Let ScriptLag := 0.5
		Let MenuLag := 0.01
		Let OneFrame := 0.00000000001

		;Set DamageAnalysis variables
		Let aaZefirosDmgAnal.fQuestDelayTime := fDamageLag
		Let aaZefirosDmgAnal.ParaXP := sXPPara * fDamageLag

		;Flags
		Let HalfOnce := 0
		Let CapOnce := 0
		Let BreakOnce := 0
		Let SeekOnce := 0
		Let RefreshOnce := 0
		Let CleanOnce := 0
		Let SigilOnce := 0
		Let EnchantOnce := 0
		Let AltLag := 0


		;-----------------------------------------------------------------------------
		;Set permanent handlers
		;-----------------------------------------------------------------------------
		Call aaZefirosSetEquipHandlers Player Selfs

		
		;-----------------------------------------------------------------------------
		;Add to Player on first start up
		;-----------------------------------------------------------------------------
		if ( aaZefirosLevel == 0 )

			Player.AddItemNS SelfBody 1
			Player.AddItemNS SelfFoot 1
			Player.AddItemNS SelfHand 1
			Player.AddItemNS SelfHead 1
			Player.AddItemNS SelfLegs 1
			Player.AddItemNS SelfShld 1

			;1 is heavy, 0 is light
			Let aaZefirosWeightBody := 1
			Let aaZefirosWeightFoot := 1
			Let aaZefirosWeightHand := 1
			Let aaZefirosWeightHead := 1
			Let aaZefirosWeightLegs := 1
			Let aaZefirosWeightShld := 1

			;Form index
			Let aaZefirosFormBody := 2
			Let aaZefirosFormFoot := 2
			Let aaZefirosFormHand := 2
			Let aaZefirosFormHead := 2
			Let aaZefirosFormLegs := 2
			Let aaZefirosFormShld := 2

			;Bit masks
			Let aaZefirosSlotBody := 4
			Let aaZefirosSlotFoot := 32
			Let aaZefirosSlotHand := 16
			Let aaZefirosSlotHead := 2
			Let aaZefirosSlotLegs := 8
			Let aaZefirosSlotShld := 8192

			;Enchant history
			Let ActvBody := ""
			Let ActvFoot := ""
			Let ActvHand := ""
			Let ActvHead := ""
			Let ActvLegs := ""
			Let ActvShld := ""
			
			Let aaZefirosLevel := 1

			Call aaZefirosFlavorMessage ( "Icons\" + Call aaZefirosGetPCBIP SelfBody ) "" MsgName "" 0 12

		endif

		
		;-----------------------------------------------------------------------------
		;Set Level, XP and related flags
		;-----------------------------------------------------------------------------
		Let Level := aaZefirosLevel

		;Set levelcap
		Let Cap := Call aaZefirosSetLevelCap sCapType sLevelCap

		;Set levelcap flag
		if ( Level >= Cap )

			Let CapOnce := 1

		endif

		;Set Break flag
		if ( aaZefirosBroken >= sBreakThreshold )

			Let BreakOnce := 1

		endif

		;XPReq is modified within the function, halfway point returned
		Let Stack := Call aaZefirosGetXPReq sXPReqBase sXPReqMult Level
		Let XPReqHalf := Stack[0]
		Let aaZefirosXPReq := XPReqHalf
		Let XPReqHalf := Stack[1]
		Let Stack := ar_Null


		;-----------------------------------------------------------------------------
		;Set armor stats
		;-----------------------------------------------------------------------------
		ForEach Item <- Selfs

			Let Val := *Item
			SetArmorType 0 Val

		loop

		Let Stack := ar_Map 0::aaZefirosWeightBody 1::aaZefirosWeightFoot 2::aaZefirosWeightHand 3::aaZefirosWeightHead 4::aaZefirosWeightLegs 5::aaZefirosWeightShld

		Let Num := 0
		while ( Num < 6 )

			Call aaZefirosSetStat ArmSt[Num][0] ArmSt[Num][1] ArmSt[Num][2] ArmSt[Num][3] ArmSt[Num][4] ArmSt[Num][5] ArmSt[Num][6] ArmSt[Num][7] Level Selfs[Num]
			Call aaZefirosSetWeight fHeavyAR fHeavyWeight Stack[Num] Selfs[Num]

			Let Num += 1
		loop
		
		Let Num := 0
		Let Stack := ar_Null


		;-----------------------------------------------------------------------------
		;Rebuild Enchantments
		;-----------------------------------------------------------------------------
		;Reset enchantments
		ForEach Item <- Enchs

			Let Val := *Item
			Call aaZefirosRemoveAllEffectItems Val

		loop

		;Purge from armor
		ForEach Item <- Selfs

			Let Val := *Item
			RemoveEnchantment Val

		loop

		;Build enchantments
		if ( Level >= sEnchStart )

			Let Stack := Call aaZefirosGetEnchantLevels 0
			Call aaZefirosSetEnchant EncSt Stack aaZefirosActvEnchBody EnchBody
			
			Let Stack := Call aaZefirosGetEnchantLevels 1
			Call aaZefirosSetEnchant EncSt Stack aaZefirosActvEnchFoot EnchFoot
			
			Let Stack := Call aaZefirosGetEnchantLevels 2
			Call aaZefirosSetEnchant EncSt Stack aaZefirosActvEnchHand EnchHand
			
			Let Stack := Call aaZefirosGetEnchantLevels 3
			Call aaZefirosSetEnchant EncSt Stack aaZefirosActvEnchHead EnchHead
			
			Let Stack := Call aaZefirosGetEnchantLevels 4
			Call aaZefirosSetEnchant EncSt Stack aaZefirosActvEnchLegs EnchLegs
			
			Let Stack := Call aaZefirosGetEnchantLevels 5
			Call aaZefirosSetEnchant EncSt Stack aaZefirosActvEnchShld EnchShld
			
			Let Stack := ar_Null

		endif
	

		;-----------------------------------------------------------------------------
		;Set Resistances
		;-----------------------------------------------------------------------------
		if ( sXPResist > 0 )

			Let ResistFI := NewFI := aaZefirosRXPFire / sXPResist
			Let ResistFR := NewFR := aaZefirosRXPFrost / sXPResist
			Let ResistSH := NewSH := aaZefirosRXPShock / sXPResist
			Let ResistMA := NewMa := aaZefirosRXPMagic / sXPResist
			Let ResistNW := NewNW := aaZefirosRXPNormal / sXPResist
			Let ResistPA := NewPA := aaZefirosRXPParalysis / sXPResist
			Let ResistDI := NewDI := aaZefirosRXPDisease / sXPResist
	
			Call aaZefirosSetResistEffects Slots Dflt ( Call aaZefirosGetResistMatrix 0 ) Enchs[0:4]
			
		endif

		if ( sEnchResist != 0 || Level >= sEnchStart )

			Call aaZefirosSetEnchOnItem Enchs Selfs

		endif


		;Item slots are reset by reboot and some may still be merged, causing SetMerge to fail
		if ( GetGameRestarted )

			;Add back all missing items so SetMerge won't fail
			Call aaZefirosPrepMerge Slots Selfs

		;Refreshing equipped armor fails in GameMode unless right after a reboot
		else

			;Call a special stage of RefreshOnce for just this occasion
			Let Equip := Call aaZefirosRefreshUnEquip Player Selfs
			Let RefreshOnce := 4

		endif


		;Prevent console clog
		SetDebugMode 0

		;All changes will not be applied until the items are re-equipped
		;SetForm re-equips items
		Let Stack := ar_Map 0::fHeavyAR 1::fHeavyWeight

		Call aaZefirosSetMerge Forms[0][aaZefirosFormBody][7] Dflt Stack ArmSt EncSt 0 Selfs
		Call aaZefirosSetForm 0 aaZefirosFormBody Forms SelfBody

		Call aaZefirosSetMerge Forms[1][aaZefirosFormFoot][7] Dflt Stack ArmSt EncSt 1 Selfs
		Call aaZefirosSetForm 1 aaZefirosFormFoot Forms SelfFoot

		Call aaZefirosSetMerge Forms[2][aaZefirosFormHand][7] Dflt Stack ArmSt EncSt 2 Selfs
		Call aaZefirosSetForm 2 aaZefirosFormHand Forms SelfHand

		Call aaZefirosSetMerge Forms[3][aaZefirosFormHead][7] Dflt Stack ArmSt EncSt 3 Selfs
		Call aaZefirosSetForm 3 aaZefirosFormHead Forms SelfHead

		Call aaZefirosSetMerge Forms[4][aaZefirosFormLegs][7] Dflt Stack ArmSt EncSt 4 Selfs
		Call aaZefirosSetForm 4 aaZefirosFormLegs Forms SelfLegs

		Call aaZefirosSetMerge Forms[5][aaZefirosFormShld][7] Dflt Stack ArmSt EncSt 5 Selfs
		Call aaZefirosSetForm 5 aaZefirosFormShld Forms SelfShld

		Let Stack := ar_Null
		
		Let Slots := Call aaZefirosGetSlots

		;Because OnUnEquip and OnEquip run at different times,
		;Equip flag can get really fucked up after SetMerge
		;(handler runs instantly, block runs at end of frame)
		Let CleanOnce := 1


		;-----------------------------------------------------------------------------
		printc "%z%B initialized!%b" MsgName
		;-----------------------------------------------------------------------------


	;-----------------------------------------------------------------------------
	endif ;( GetGameLoaded )
	;-----------------------------------------------------------------------------

	;Repeats in MenuMode
	;-----------------------------------------------------------------------------
	;Set debug mode
	;-----------------------------------------------------------------------------
	SetDebugMode aaZefirosDebug

	;-----------------------------------------------------------------------------
	;Set script lag
	;-----------------------------------------------------------------------------
	if ( fQuestDelayTime != ScriptLag && AltLag == 0 )
	
		Let fQuestDelayTime := ScriptLag
	
	endif

	;Repeats in MenuMode
	;-----------------------------------------------------------------------------
	;Reassess Equip flag and handlers
	;-----------------------------------------------------------------------------
	if ( CleanOnce > 0 )
	
		Let CleanOnce := Call aaZefirosFlagCleanOnce CleanOnce
	
	endif

	;-----------------------------------------------------------------------------
	;Log XP from combat
	;-----------------------------------------------------------------------------
	if ( aaZefirosXPLog == 1 && Player.IsInCombat == 0 )

		Call aaZefirosLogXP ( aaZefirosXP - aaZefirosXPCombat ) "Damage taken."
		Let aaZefirosXPLog := 0

	endif

	;-----------------------------------------------------------------------------
	;Update resistances
	;-----------------------------------------------------------------------------
	if ( sXPResist > 0 )
	;-----------------------------------------------------------------------------
	
		Let NewFI := aaZefirosRXPFire / sXPResist
		Let NewFR := aaZefirosRXPFrost / sXPResist
		Let NewSH := aaZefirosRXPShock / sXPResist
		Let NewMa := aaZefirosRXPMagic / sXPResist
		Let NewNW := aaZefirosRXPNormal / sXPResist
		Let NewPA := aaZefirosRXPParalysis / sXPResist
		Let NewDI := aaZefirosRXPDisease / sXPResist

		Let Stack := Call aaZefirosSetResistEffects Slots Dflt ( Call aaZefirosGetResistMatrix 1 ) Enchs[0:4]

		Let ResistFI := Stack[0][1]
		Let ResistFR := Stack[1][1]
		Let ResistSH := Stack[2][1]
		Let ResistMA := Stack[3][1]
		Let ResistNW := Stack[4][1]
		Let ResistPA := Stack[5][1]
		Let ResistDI := Stack[6][1]

		Let Stack := ar_Null
		
	;-----------------------------------------------------------------------------
	endif ;( sXPResist > 0 )
	;-----------------------------------------------------------------------------

	;-----------------------------------------------------------------------------
	;Enchant Seek
	;-----------------------------------------------------------------------------
	if ( SeekOnce > 0 && Player.IsInCombat == 0 )
	;-----------------------------------------------------------------------------

		;-----------------------------------------------------------------------------
		;Prep Seek block
		;-----------------------------------------------------------------------------
		if ( SeekOnce == 1 )
	
			;Greatly speed up the script so menus are responsive
			Let fQuestDelayTime := MenuLag
			Let AltLag := 1
			Let Seek := ar_Map 0::-1 1::0
			Let Actv := ar_Map 0::str_BodyName 1::str_FootName 2::str_HandName 3::str_HeadName 4::str_LegsName 5::str_ShldName
			Let SeekOnce := 2
			Let i := 0
			

		;-----------------------------------------------------------------------------
		;Seek Enchantment
		;-----------------------------------------------------------------------------
		elseif ( SeekOnce == 2 )

			;While loop gives GetButtonPressed in GetEnchChoice no time, freezing game
			if ( i < 6 )

				;Prompt player to choose an enchantment
				if ( i == 5 ) ;Shield has alternate choices

					Let Seek := Call aaZefirosGetEnchChoice Actv[i] 1 Seek[0] Seek[1]

				else

					Let Seek := Call aaZefirosGetEnchChoice Actv[i] 0 Seek[0] Seek[1]

				endif
				
				;Store enchant choice
				if eval( Seek[1] == -1 )

					Let Actv[i] := Seek[0] ;Overwrite name with new global value
					Let Seek := ar_Map 0::-1 1::0
					Let i += 1
		
				endif
				
			else

				Let SeekOnce := 3

			endif
	

		;-----------------------------------------------------------------------------
		;Clean Up
		;-----------------------------------------------------------------------------
		elseif ( SeekOnce == 3 )

			;Set new effects
			Call aaZefirosSetSeek Slots Dflt EncSt Actv Enchs

			;Update globals
			Let aaZefirosActvEnchBody := Actv[0]
			Let aaZefirosActvEnchFoot := Actv[1]
			Let aaZefirosActvEnchHand := Actv[2]
			Let aaZefirosActvEnchHead := Actv[3]
			Let aaZefirosActvEnchLegs := Actv[4]
			Let aaZefirosActvEnchShld := Actv[5]

			;Set enchantments if not set already
			Call aaZefirosSetEnchOnItem Enchs Selfs

			;Reorder Resist effects
			Let Stack := ar_Construct Array
			Let Stack[0] := ar_Map 0::( GetMagicEffectCode RSFI ) 1::256
			Let Stack[1] := ar_Map 0::( GetMagicEffectCode RSFR ) 1::256
			Let Stack[2] := ar_Map 0::( GetMagicEffectCode RSSH ) 1::256
			Let Stack[3] := ar_Map 0::( GetMagicEffectCode RSMA ) 1::256
			Let Stack[4] := ar_Map 0::( GetMagicEffectCode RSNW ) 1::256
			Let Stack[5] := ar_Map 0::( GetMagicEffectCode RSPA ) 1::256
			Let Stack[6] := ar_Map 0::( GetMagicEffectCode RSDI ) 1::256
			Call aaZefirosReorderEffects Stack Enchs[0:4]
			Let Stack := ar_Null

			Let Seek := ar_Null
			Let Actv := ar_Null
			Let SeekOnce := AltLag := i := 0
			
			if ( Level == aaZefirosLevel )

				Let RefreshOnce := 1

			endif

		endif

	;-----------------------------------------------------------------------------
	endif ;( SeekOnce > 0 && Player.IsInCombat == 0 )
	;-----------------------------------------------------------------------------

	;-----------------------------------------------------------------------------
	;Level Cap
	;-----------------------------------------------------------------------------
	if ( sCapType > 0 && sCapType < 5 )

		Let Cap := Call aaZefirosSetLevelCap sCapType sLevelCap

		if ( Level < Cap )

			Let CapOnce := 0

		endif

	endif

	;-----------------------------------------------------------------------------
	;Level Up
	;-----------------------------------------------------------------------------
	while ( aaZefirosLevel < Cap && aaZefirosXP >= aaZefirosXPReq )

		Let aaZefirosLevel += 1

		;Set XPReq
		Let Stack := Call aaZefirosGetXPReq sXPReqBase sXPReqMult aaZefirosLevel
		Let XPReqHalf := Stack[0]
		Let aaZefirosXPReq := XPReqHalf
		Let XPReqHalf := Stack[1]
		Let Stack := ar_Null
		
		Let HalfOnce := 0

	loop

	;-----------------------------------------------------------------------------
	;Level Down on Break
	;-----------------------------------------------------------------------------
	if ( sBreakLevel >= 0 && sBreakThreshold > 0 )

		;Check the number of broken items
		Let Nmb := 0
		ForEach Item <- Selfs

			Let Val := *Item
			Let Nmb += Call aaZefirosGetBroken Player Val

		loop
		Let aaZefirosBroken := Nmb
		Let Nmb := 0

		;If exceeding the theshold, delevel
		if ( aaZefirosBroken >= sBreakThreshold && BreakOnce == 0 )

			;If end level > 1
			if ( sBreakLevel > 0 && sBreakLevel < aaZefirosLevel )

				Let aaZefirosLevel -= sBreakLevel

				;Reduce XP or else Level Up will undo this block
				Let Stack := Call aaZefirosGetXPReq sXPReqBase sXPReqMult ( aaZefirosLevel - 1 )
				Let XPReqHalf := Stack[0]
				Let aaZefirosXP := XPReqHalf
				
			else

				Let aaZefirosLevel := 1
				Let aaZefirosXP := 0

			endif

			;Set XPReq
			Let Stack := Call aaZefirosGetXPReq sXPReqBase sXPReqMult aaZefirosLevel
			Let XPReqHalf := Stack[0]
			Let aaZefirosXPReq := XPReqHalf
			Let XPReqHalf := Stack[1]
			Let Stack := ar_Null
			
			Let HalfOnce := 0

			Let BreakOnce := 1

		elseif ( aaZefirosBroken < sBreakThreshold )

			Let BreakOnce := 0

		endif

	endif
	
	;-----------------------------------------------------------------------------
	;Apply level changes
	;-----------------------------------------------------------------------------
	if ( Level != aaZefirosLevel && SeekOnce == 0 )
	;-----------------------------------------------------------------------------
	
		;The value Level will become
		Let Nmb := aaZefirosLevel


		;-----------------------------------------------------------------------------
		;Mod active enchantments
		;-----------------------------------------------------------------------------
		if ( Nmb >= sEnchStart )
		;-----------------------------------------------------------------------------
			

			;Increase Level
			;-----------------------------------------------------------------------------
			if ( Nmb - Level > 0 )
			;-----------------------------------------------------------------------------
		
				;Check if at or passed a Seek level
				if ( Level < sEnchStart || Level + sEnchSeek - ( ( Level - sEnchStart ) % sEnchSeek ) <= Nmb )
	
					Let SeekOnce := 1
	
					if ( Level < sEnchStart )
	
						Let Nmb := sEnchStart
	
					else
	
						Let Nmb := Level + sEnchSeek - ( ( Level - sEnchStart ) % sEnchSeek )
	
					endif
	
				endif
	

				;Skip increment if no enchantments exist already
				if ( Level >= sEnchStart )

					Let Stack := ar_Map 0::aaZefirosActvEnchBody 1::aaZefirosActvEnchFoot 2::aaZefirosActvEnchHand 3::aaZefirosActvEnchHead 4::aaZefirosActvEnchLegs 5::aaZefirosActvEnchShld
					Call aaZefirosIncrementEnchant Slots Dflt EncSt ( Nmb - Level ) Stack Enchs
					Let Stack := ar_Null
	
					Let ActvBody := Call aaZefirosSetSeekArray aaZefirosActvEnchBody ( Nmb - Level ) ActvBody
					Let ActvFoot := Call aaZefirosSetSeekArray aaZefirosActvEnchFoot ( Nmb - Level ) ActvFoot
					Let ActvHand := Call aaZefirosSetSeekArray aaZefirosActvEnchHand ( Nmb - Level ) ActvHand
					Let ActvHead := Call aaZefirosSetSeekArray aaZefirosActvEnchHead ( Nmb - Level ) ActvHead
					Let ActvLegs := Call aaZefirosSetSeekArray aaZefirosActvEnchLegs ( Nmb - Level ) ActvLegs
					Let ActvShld := Call aaZefirosSetSeekArray aaZefirosActvEnchShld ( Nmb - Level ) ActvShld
					
					DebugPrint "%BActvBody:%b %z" ActvBody
					DebugPrint "%BActvFoot:%b %z" ActvFoot
					DebugPrint "%BActvHand:%b %z" ActvHand
					DebugPrint "%BActvHead:%b %z" ActvHead
					DebugPrint "%BActvLegs:%b %z" ActvLegs
					DebugPrint "%BActvShld:%b %z" ActvShld
			
				endif


			;Decrease Level
			;-----------------------------------------------------------------------------
			else ;( Nmb - Level < 0 )
			;-----------------------------------------------------------------------------

				Let Item := ar_Map 0::ActvBody 1::ActvFoot 2::ActvHand 3::ActvHead 4::ActvLegs 5::ActvShld
				Let Item := Call aaZefirosUndoEnchant Slots Dflt ( Level - Nmb ) EncSt Item Enchs

				;Compiler throws a fit if a passthrough isn't used
				Let Num := Item[0][0]
				Let aaZefirosActvEnchBody := Num
				Let Num := Item[0][1]
				Let aaZefirosActvEnchFoot := Num
				Let Num := Item[0][2]
				Let aaZefirosActvEnchHand := Num
				Let Num := Item[0][3]
				Let aaZefirosActvEnchHead := Num
				Let Num := Item[0][4]
				Let aaZefirosActvEnchLegs := Num
				Let Num := Item[0][5]
				Let aaZefirosActvEnchShld := Num

				Let ActvBody := Item[1][0]
				Let ActvFoot := Item[1][1]
				Let ActvHand := Item[1][2]
				Let ActvHead := Item[1][3]
				Let ActvLegs := Item[1][4]
				Let ActvShld := Item[1][5]

				DebugPrint "%BActvEnchBody:%b %.0f %BActvBody:%b %z" aaZefirosActvEnchBody ActvBody
				DebugPrint "%BActvEnchFoot:%b %.0f %BActvFoot:%b %z" aaZefirosActvEnchFoot ActvFoot
				DebugPrint "%BActvEnchHand:%b %.0f %BActvHand:%b %z" aaZefirosActvEnchHand ActvHand
				DebugPrint "%BActvEnchHead:%b %.0f %BActvHead:%b %z" aaZefirosActvEnchHead ActvHead
				DebugPrint "%BActvEnchLegs:%b %.0f %BActvLegs:%b %z" aaZefirosActvEnchLegs ActvLegs
				DebugPrint "%BActvEnchShld:%b %.0f %BActvShld:%b %z" aaZefirosActvEnchShld ActvShld

				Let Num := 0
				Let Item := ar_Null

			;-----------------------------------------------------------------------------
			endif ;( Nmb - Level > 0 )
			;-----------------------------------------------------------------------------
			

		;-----------------------------------------------------------------------------
		;If regressing to below sEnchStart, purge enchantments
		;-----------------------------------------------------------------------------
		elseif ( sEnchStart <= Level )
		;-----------------------------------------------------------------------------
		
			ForEach Item <- Enchs

				Let Val := *Item
				Call aaZefirosRemoveAllEffectItems Val

			loop

			ForEach Item <- Selfs

				Let Val := *Item
				RemoveEnchantment Val

			loop
			Let Val := 0

			;Reinstate dynamic resistances
			if ( sXPResist > 0 )

				Call aaZefirosSetResistEffects Slots Dflt ( Call aaZefirosGetResistMatrix 0 ) Enchs[0:4]

			endif

			;Reset globals
			Call aaZefirosModEnchLevel -1 0 0
			Let aaZefirosActvEnchBody := aaZefirosActvEnchFoot := 0
			Let aaZefirosActvEnchHand := aaZefirosActvEnchHead := 0
			Let aaZefirosActvEnchLegs := aaZefirosActvEnchShld := 0

			;Reset enchantments if resistances are present
			if ( sEnchResist != 0 )

				Call aaZefirosSetEnchOnItem Enchs Selfs

			endif

		;-----------------------------------------------------------------------------
		endif ;( Nmb >= sEnchStart )
		;-----------------------------------------------------------------------------
		
		
		;-----------------------------------------------------------------------------
		;Mod armor stats
		;-----------------------------------------------------------------------------
		Let Stack := ar_Map 0::aaZefirosWeightBody 1::aaZefirosWeightFoot 2::aaZefirosWeightHand 3::aaZefirosWeightHead 4::aaZefirosWeightLegs 5::aaZefirosWeightShld

		Let Item := Call aaZefirosGetDurability Player Selfs

		Let Num := 0
		while ( Num < 6 )

			Call aaZefirosModStat Dflt ArmSt fHeavyAR fHeavyWeight Stack[Num] Level Nmb Selfs[Num]

			Let Num += 1
		loop

		Call aaZefirosSetDurability Player Item Selfs

		Let Num := 0
		Let Stack := ar_Null
		Let Item := ar_Null

		
		;-----------------------------------------------------------------------------
		;Flavor text
		;-----------------------------------------------------------------------------
		Call aaZefirosLogLevel MsgName Nmb

		;Only output text once Level has caught up to aaZefirosLevel
		if ( aaZefirosLevel == Nmb )

			if ( Nmb == 1 )

				;De-level to 1
				Let CapOnce := 0
				Call aaZefirosFlavorBox MsgName 1

			elseif ( Nmb >= Cap && CapOnce == 0 )
	
				;Level cap
				Let CapOnce := 1
				Call aaZefirosFlavorBox MsgName 0
	
			elseif ( Nmb - Level > 0 )

				;Level up
				Call aaZefirosFlavorMessage ( "Icons\" + Call aaZefirosGetPCBIP SelfBody ) "" MsgName "" 1 8
	
			else
	
				;Level down
				Let CapOnce := 0
				Call aaZefirosFlavorBox MsgName 2
	
			endif

		endif

		
		Let Level := Nmb
		Let Nmb := 0
		
		if ( SeekOnce == 0 )

			Let RefreshOnce := 1 ;Flag is otherwise set by Seek code

		endif


	;-----------------------------------------------------------------------------
	endif ;( Level != aaZefirosLevel )
	;-----------------------------------------------------------------------------

	;-----------------------------------------------------------------------------
	;Halfway message
	;-----------------------------------------------------------------------------
	if ( CapOnce == 0 && HalfOnce == 0 && aaZefirosXP >= XPReqHalf )

		Call aaZefirosFlavorMessage ( "Icons\" + Call aaZefirosGetPCBIP SelfBody ) "" MsgName "" 2 4
		Let HalfOnce := 1

	endif
	
	;-----------------------------------------------------------------------------
	;Refresh Equipped Items
	;-----------------------------------------------------------------------------
	;If EquipItem and UnEquipItem occur on the same frame, EquipItem fails
	;Wait one frame so you don't appear naked during a message box popup
	if ( RefreshOnce == 1 )

		Let fQuestDelayTime := OneFrame
		Let AltLag := 1
		Let RefreshOnce := 2

	elseif ( RefreshOnce == 2 )

		Let Equip := Call aaZefirosRefreshUnEquip Player Selfs
		Let RefreshOnce := 3

	elseif ( RefreshOnce == 3 )

		Call aaZefirosRefreshEquip Player Equip
		Let Equip := ar_Null
		Let RefreshOnce := 0
		Let AltLag := 0

	;This stage exists to bypass the bug on GetGameLoaded
	elseif ( RefreshOnce == 4 )

		Let fQuestDelayTime := OneFrame
		Let AltLag := 1
		Let RefreshOnce := 3

	endif

	;-----------------------------------------------------------------------------
	;Reset Menu if MenuMode force exited
	;-----------------------------------------------------------------------------
	if ( Menu > 0 )

		Let Menu := 0

	endif

	;Repeats at start of MenuMode Inventory
	;-----------------------------------------------------------------------------
	;Undo player enchantment
	;-----------------------------------------------------------------------------
	if ( EnchantOnce > 0 )

		Let EnchantOnce := Call aaZefirosFlagEnchantOnce Soul[0] Soul[1] Soul[2] Soul[3] EnchantOnce

	endif

	if ( SigilOnce > 0 )

		Let Stack := Call aaZefirosFlagSigilOnce Selfs SigilItem SigilOnce

		Let SigilItem := Stack[0]
		Let SigilOnce := Stack[1]

		Let Stack := ar_Null
		
	endif

;-----------------------------------------------------------------------------
end ;GameMode
;-----------------------------------------------------------------------------

;-----------------------------------------------------------------------------
begin MenuMode
;-----------------------------------------------------------------------------

	;-----------------------------------------------------------------------------
	;Set script lag
	;-----------------------------------------------------------------------------
	if ( fQuestDelayTime != MenuLag && AltLag == 0 )
	
		Let fQuestDelayTime := MenuLag
	
	endif

	;Repeats at start of GameMode
	;-----------------------------------------------------------------------------
	;Set debug mode
	;-----------------------------------------------------------------------------
	SetDebugMode aaZefirosDebug

	;Repeats at start of GameMode
	;-----------------------------------------------------------------------------
	;Reassess Equip flag and handlers
	;-----------------------------------------------------------------------------
	if ( CleanOnce > 0 )
	
		Let CleanOnce := Call aaZefirosFlagCleanOnce CleanOnce
	
	endif

;-----------------------------------------------------------------------------
end ;MenuMode
;-----------------------------------------------------------------------------

;-----------------------------------------------------------------------------
begin MenuMode 1002 ;Inventory
;-----------------------------------------------------------------------------

	;Repeats at end of GameMode
	;-----------------------------------------------------------------------------
	;Undo player enchantment
	;-----------------------------------------------------------------------------
	if ( EnchantOnce > 0 )

		Let EnchantOnce := Call aaZefirosFlagEnchantOnce Soul[0] Soul[1] Soul[2] Soul[3] EnchantOnce

	endif

	if ( SigilOnce > 0 )

		Let Stack := Call aaZefirosFlagSigilOnce Selfs SigilItem SigilOnce

		Let SigilItem := Stack[0]
		Let SigilOnce := Stack[1]

		Let Stack := ar_Null
		
	endif

	;-----------------------------------------------------------------------------
	;When in Armor/Clothing tab and not in a Zefiros menu
	;-----------------------------------------------------------------------------
	if ( Menu == 0 && GetActiveMenuFilter == 2 )
	;-----------------------------------------------------------------------------
	
		Let Val := GetActiveMenuSelection
		Let j := ar_Find Val Selfs

		;-----------------------------------------------------------------------------
		if eval( ar_BadNumericIndex != j )
		;-----------------------------------------------------------------------------
		
			;-----------------------------------------------------------------------------
			;Form name
			;-----------------------------------------------------------------------------
			if ( ( IsKeyPressed2 sNameKey1 || IsControlPressed sNameBut1 ) && ( IsKeyPressed2 sNameKey2 || IsKeyPressed2 sNameKey3 || IsControlPressed sNameBut2 ) )
		
				Let Menu := 3
	
			;-----------------------------------------------------------------------------
			;Enchantment effects
			;-----------------------------------------------------------------------------
			elseif ( ( IsKeyPressed2 sEnchKey1 || IsControlPressed sEnchBut1 ) && ( IsKeyPressed2 sEnchKey2 || IsKeyPressed2 sEnchKey3 || IsControlPressed sEnchBut2 ) )
	
				Let Menu := 4
		
			;-----------------------------------------------------------------------------
			;Form menu
			;-----------------------------------------------------------------------------
			elseif ( ( IsKeyPressed2 sFormKey1 || IsControlPressed sFormBut1 ) && ( IsKeyPressed2 sFormKey2 || IsKeyPressed2 sFormKey3 || IsControlPressed sFormBut2 ) )
		
				Let Menu := 5
	
			endif
		
	
		;-----------------------------------------------------------------------------
		else ;( ar_BadNumericIndex == j )
		;-----------------------------------------------------------------------------
		
			;-----------------------------------------------------------------------------
			;Mimic item
			;-----------------------------------------------------------------------------
			if ( ( IsKeyPressed2 sCopyKey1 || IsControlPressed sCopyBut1 ) && ( IsKeyPressed2 sCopyKey2 || IsKeyPressed2 sCopyKey3 || IsControlPressed sCopyBut2 ) )
		
				if ( IsArmor Val || IsClothing Val )
		
					Let Menu := 2
		
				endif
		
			;-----------------------------------------------------------------------------
			;Offer item
			;-----------------------------------------------------------------------------
			elseif ( ( IsKeyPressed2 sOffrKey1 || IsControlPressed sOffrBut1 ) && ( IsKeyPressed2 sOffrKey2 || IsKeyPressed2 sOffrKey3 || IsControlPressed sOffrBut2 ) )
		
				if ( IsArmor Val )
		
					Let Menu := 1
					Let Num := -2
		
				endif
	
			endif

		;-----------------------------------------------------------------------------
		endif ;( ar_BadNumericIndex != j )
		;-----------------------------------------------------------------------------
	
	;-----------------------------------------------------------------------------
	endif ;( Menu == 0 )
	;-----------------------------------------------------------------------------

	;-----------------------------------------------------------------------------
	;Offer
	;-----------------------------------------------------------------------------
	if ( Menu == 1 )

		if ( Num < 0 )

			DebugPrint "%BCalling Offer...%b"
			Let Num := Call aaZefirosOffer CapOnce MsgName Val Num

		elseif ( Num == 0 )

			Call aaZefirosSacrifice fAbsorption Val Selfs
			Let Num := 1

		else

			DebugPrint "%BOffer ended.%b"
			Let Menu := Num := 0

		endif

	;-----------------------------------------------------------------------------
	;Mimic
	;-----------------------------------------------------------------------------
	elseif ( Menu == 2 )

		DebugPrint "%BCalling SetMimic...%b"
		Let Stack := ar_Map 0::fHeavyAR 1::fHeavyWeight
		Let Forms := Call aaZefirosSetMimic Val Stack ArmSt EncSt Dflt Selfs Forms
		Let Slots := Call aaZefirosGetSlots
		
		Let Stack := ar_Map 0::Forms[0][0] 1::Forms[1][0] 2::Forms[2][0] 3::Forms[3][0] 4::Forms[4][0] 5::Forms[5][0]
		Call aaZefirosSaveMimic Stack
		Let Stack := ar_Null

		Let Menu := 20
		Let CleanOnce := 1

	;-----------------------------------------------------------------------------
	;Mimic key trap
	;-----------------------------------------------------------------------------
	elseif ( Menu == 20 ) && eval( !( IsKeyPressed2 sCopyKey1 && ( IsKeyPressed2 sCopyKey2 || IsKeyPressed2 sCopyKey3 ) ) )

		;This prevents Mimic from being called again until the keys are released
		Let Menu := 0
		
	;-----------------------------------------------------------------------------
	;Form Name
	;-----------------------------------------------------------------------------
	elseif ( Menu == 3 )

		Let Stack := ar_Map 0::aaZefirosFormBody 1::aaZefirosFormFoot 2::aaZefirosFormHand 3::aaZefirosFormHead 4::aaZefirosFormLegs 5::aaZefirosFormShld

		Call aaZefirosFlavorMessage ( "Icons\" + Call aaZefirosGetPCBIP Selfs[j] ) "" $Selfs[j] Forms[j][Stack[j]][6] 5 4

		Let Stack := ar_Null

		Let Menu := 30

	;-----------------------------------------------------------------------------
	;Form Name key trap
	;-----------------------------------------------------------------------------
	elseif ( Menu == 30 ) && eval( !( IsKeyPressed2 sNameKey1 && ( IsKeyPressed2 sNameKey2 || IsKeyPressed2 sNameKey3 ) ) )

		;This prevents Form Name from being called again until the keys are released
		Let Menu := 0
		
	;-----------------------------------------------------------------------------
	;Enchantment
	;-----------------------------------------------------------------------------
	elseif ( Menu == 4 )

		Let Stack := ar_Map 0::aaZefirosActvEnchBody 1::aaZefirosActvEnchFoot 2::aaZefirosActvEnchHand 3::aaZefirosActvEnchHead 4::aaZefirosActvEnchLegs 5::aaZefirosActvEnchShld

		Call aaZefirosEnchantBox Val Stack[j]

		Let Stack := ar_Null

		Let Menu := 0

	;-----------------------------------------------------------------------------
	;Form Change
	;-----------------------------------------------------------------------------
	elseif ( Menu == 5 )

		Let Menu := 0

	endif

;-----------------------------------------------------------------------------
end ;MenuMode Inventory
;-----------------------------------------------------------------------------

;-----------------------------------------------------------------------------
begin MenuMode 1042 ;Enchanting
;-----------------------------------------------------------------------------

	Let Stack := Call aaZefirosOnEnchanting Selfs Soul[0] Soul[1] Soul[2] Soul[3] EnchantOnce

	Let Soul := Stack[0]
	Let EnchantOnce := Stack[1]

	Let Stack := ar_Null
	
;-----------------------------------------------------------------------------
end ;MenuMode Enchanting
;-----------------------------------------------------------------------------

;-----------------------------------------------------------------------------
begin MenuMode 1048 ;SigilStone
;-----------------------------------------------------------------------------

	;No such robust tools for SigilStone :(
	if ( Level < sEnchStart )

		Let SigilOnce := 1

	endif
	
;-----------------------------------------------------------------------------
end ;MenuMode SigilStone
;-----------------------------------------------------------------------------