scn aaZefirosManager

;The quest this is attached to, 
;and therefore this script, 
;run every this second(s).
float fQuestDelayTime



;Main script
;-----------------------------------------------------------------------------
;aaZefirosManager
;-----------------------------------------------------------------------------

;Used scripts
;-----------------------------------------------------------------------------
;aaZefirosDefaultINI
;aaZefirosCleanUp
;aaZefirosGetEnchantData
;aaZefirosSetName
;aaZefirosSetEquipHandlers
;aaZefirosGetPCBIP
;aaZefirosSetStat
;aaZefirosSetWeight
;aaZefirosSetXPReq
;aaZefirosGetEnchantLevels
;aaZefirosSetEnchant
;aaZefirosSetResists
;aaZefirosSetEnchOnItem
;aaZefirosRefreshEquipped
;aaZefirosLogXP
;aaZefirosSetEffectItem
;-----------------------------------------------------------------------------

;Related scripts
;-----------------------------------------------------------------------------
;aaZefirosDamageAnalysis
;-----------------------------------------------------------------------------

;Used globals
;-----------------------------------------------------------------------------
;aaZefirosDebug
;aaZefirosLevel
;aaZefirosWeightBody
;aaZefirosWeightFoot
;aaZefirosWeightHand
;aaZefirosWeightHead
;aaZefirosWeightLegs
;aaZefirosWeightShld
;aaZefirosActvEnchBody
;aaZefirosActvEnchFoot
;aaZefirosActvEnchHand
;aaZefirosActvEnchHead
;aaZefirosActvEnchLegs
;aaZefirosActvEnchShld
;aaZefirosRXPFire
;aaZefirosRXPFrost
;aaZefirosRXPShock
;aaZefirosRXPMagic
;aaZefirosRXPNormal
;aaZefirosRXPParalysis
;aaZefirosRXPDisease
;aaZefirosXPLog
;aaZefirosXP
;aaZefirosXPCombat
;aaZefirosXPReq
;-----------------------------------------------------------------------------

;Related globals
;-----------------------------------------------------------------------------
;aaZefirosEquip
;aaZefirosRLogFire
;aaZefirosRLogFrost
;aaZefirosRLogMagic
;aaZefirosRLogNormal
;aaZefirosRLogParalysis
;aaZefirosRLogPhysical
;aaZefirosRLogShock
;aaZefirosXPReq
;-----------------------------------------------------------------------------

;Description
;-----------------------------------------------------------------------------
;Main script of Zefiros.
;-----------------------------------------------------------------------------

;Engine objects
;-----------------------------------------------------------------------------
;Items	>	Armor >			DLScalar4Body
;							DLScalar4Foot
;							DLScalar4Hand
;							DLScalar4Head
;							DLScarar4Legs
;							DLScalar4Shld
;Magic >	Enchantment >	DLScalar4BodyEnch
;							DLScalar4FootEnch
;							DLScalar4HandEnch
;							DLScalar4HeadEnch
;							DLScarar4LegsEnch
;							DLScalar4ShldEnch
;-----------------------------------------------------------------------------

;Parameters
;-----------------------------------------------------------------------------
;References to ArmorID and EnchantID
;-----------------------------------------------------------------------------
ref SelfBody
ref SelfFoot
ref SelfHand
ref SelfHead
ref SelfLegs
ref SelfShld

ref EnchBody
ref EnchFoot
ref EnchHand
ref EnchHead
ref EnchLegs
ref EnchShld

;-----------------------------------------------------------------------------
;Armor variables
;-----------------------------------------------------------------------------
short sBodyARBase
short sFootARBase
short sHandARBase
short sHeadARBase
short sLegsARBase
short sShldARBase

float fBodyWeightBase
float fFootWeightBase
float fHandWeightBase
float fHeadWeightBase
float fLegsWeightBase
float fShldWeightBase

short sBodyHealthBase
short sFootHealthBase
short sHandHealthBase
short sHeadHealthBase
short sLegsHealthBase
short sShldHealthBase

long lBodyValueBase
long lFootValueBase
long lHandValueBase
long lHeadValueBase
long lLegsValueBase
long lShldValueBase

short sBodyARMult
short sFootARMult
short sHandARMult
short sHeadARMult
short sLegsARMult
short sShldARMult

float fBodyWeightMult
float fFootWeightMult
float fHandWeightMult
float fHeadWeightMult
float fLegsWeightMult
float fShldWeightMult

float fBodyHealthMult
float fFootHealthMult
float fHandHealthMult
float fHeadHealthMult
float fLegsHealthMult
float fShldHealthMult

float fBodyValueMult
float fFootValueMult
float fHandValueMult
float fHeadValueMult
float fLegsValueMult
float fShldValueMult

;-----------------------------------------------------------------------------
;Weight adjustment variables
;-----------------------------------------------------------------------------
float fHeavyAR
float fHeavyWeight

;-----------------------------------------------------------------------------
;Level up variables
;-----------------------------------------------------------------------------
short sXPReqBase
short sXPReqMult
short sXPResist
short sXPPara
float sXPDisease
short sXPNoDmg
short sLevelCap
short sBreakLevel
float fAbsorption

short CombatXP
long XPReqHalf
short Level

;-----------------------------------------------------------------------------
;Enchantment variables
;-----------------------------------------------------------------------------
short sEnchStart
short sEnchSeek
short sEnchResist

short sFOATBase
float fFOATMult

short sFOSKBase
float fFOSKMult

short sFOFABase
float fFOFAMult

short sFOHEBase
float fFOHEMult

short sFOSPBase
float fFOSPMult

short sREFABase
float fREFAMult

short sREHEBase
float fREHEMult

short sRESPBase
float fRESPMult

short sSHLDBase
float fSHLDMult

short sFTHRBase
float fFTHRMult

short sREDGBase
float fREDGMult

short sRFLCBase
float fRFLCMult

short sSABSBase
float fSABSMult

;-----------------------------------------------------------------------------
;Resistance variables
;-----------------------------------------------------------------------------
short ResistFI
short ResistFR
short ResistSH
short ResistMA
short ResistNW
short ResistPA
short ResistDI

short NewFI
short NewFR
short NewSH
short NewMA
short NewNW
short NewPA
short NewDI

;-----------------------------------------------------------------------------
;Latency variables
;-----------------------------------------------------------------------------
float ScriptLag
float MenuLag
float fDamageLag
float OneFrame

;-----------------------------------------------------------------------------
;Flags
;-----------------------------------------------------------------------------
short sBodyFix
short sFootFix
short sHandFix
short sHeadFix
short sLegsFix
short sShldFix

short HalfOnce
short CapOnce
short BreakOnce
short SeekOnce
short RefreshOnce

;-----------------------------------------------------------------------------
;Shorts
;-----------------------------------------------------------------------------
short Num
short Nmb

;-----------------------------------------------------------------------------
;Strings
;-----------------------------------------------------------------------------
string_var str_Prefix
string_var str_Postfix
string_var str_BodyName
string_var str_FootName
string_var str_HandName
string_var str_HeadName
string_var str_LegsName
string_var str_ShldName
string_var MsgName
string_var ActvBody
string_var ActvFoot
string_var ActvHand
string_var ActvHead
string_var ActvLegs
string_var ActvShld

;-----------------------------------------------------------------------------
;Arrays
;-----------------------------------------------------------------------------
array_var Selfs
array_var Enchs
array_var EncSt
array_var ArmSt
array_var Equip
array_var Stack
array_var Item

;-----------------------------------------------------------------------------
;References
;-----------------------------------------------------------------------------
ref Val
;-----------------------------------------------------------------------------





;-----------------------------------------------------------------------------
begin GameMode
;-----------------------------------------------------------------------------

	;-----------------------------------------------------------------------------
	;Initializer sub-block
	;-----------------------------------------------------------------------------
	if ( GetGameLoaded )
	;-----------------------------------------------------------------------------

		;-----------------------------------------------------------------------------
		;Initialize variables
		;-----------------------------------------------------------------------------
		;Armor refs
		Let SelfBody := DLScalar4Body
		Let SelfFoot := DLScalar4Foot
		Let SelfHand := DLScalar4Hand
		Let SelfHead := DLScalar4Head
		Let SelfLegs := DLScalar4Legs
		Let SelfShld := DLScalar4Shld

		;Enchantment refs
		Let EnchBody := DLScalar4BodyEnch
		Let EnchFoot := DLScalar4FootEnch
		Let EnchHand := DLScalar4HandEnch
		Let EnchHead := DLScalar4HeadEnch
		Let EnchLegs := DLScalar4LegsEnch
		Let EnchShld := DLScalar4ShldEnch

		;Initialize with default values
		Call aaZefirosDefaultINI

		;Initialize with user defined values
		RunBatchScript "Data\ini\Zefiros.ini"

		;Set debug mode
		SetDebugMode aaZefirosDebug

		;Clean up lingering data from last load
		Call aaZefirosCleanUp 1

		;Create arrays
		Let Selfs := ar_Construct Array
		ar_Append Selfs SelfBody
		ar_Append Selfs SelfFoot
		ar_Append Selfs SelfHand
		ar_Append Selfs SelfHead
		ar_Append Selfs SelfLegs
		ar_Append Selfs SelfShld

		Let Enchs := ar_Construct Array
		ar_Append Enchs EnchBody
		ar_Append Enchs EnchFoot
		ar_Append Enchs EnchHand
		ar_Append Enchs EnchHead
		ar_Append Enchs EnchLegs
		ar_Append Enchs EnchShld

		Let EncSt := Call aaZefirosGetEnchantData

		Let ArmSt := ar_Construct Array
		Let ArmSt[0] := ar_Map 0::sBodyARBase 1::fBodyWeightBase 2::sBodyHealthBase 3::lBodyValueBase 4::sBodyARMult 5::fBodyWeightMult 6::fBodyHealthMult 7::fBodyValueMult
		Let ArmSt[1] := ar_Map 0::sFootARBase 1::fFootWeightBase 2::sFootHealthBase 3::lFootValueBase 4::sFootARMult 5::fFootWeightMult 6::fFootHealthMult 7::fFootValueMult
		Let ArmSt[2] := ar_Map 0::sHandARBase 1::fHandWeightBase 2::sHandHealthBase 3::lHandValueBase 4::sHandARMult 5::fHandWeightMult 6::fHandHealthMult 7::fHandValueMult
		Let ArmSt[3] := ar_Map 0::sHeadARBase 1::fHeadWeightBase 2::sHeadHealthBase 3::lHeadValueBase 4::sHeadARMult 5::fHeadWeightMult 6::fHeadHealthMult 7::fHeadValueMult
		Let ArmSt[4] := ar_Map 0::sLegsARBase 1::fLegsWeightBase 2::sLegsHealthBase 3::lLegsValueBase 4::sLegsARMult 5::fLegsWeightMult 6::fLegsHealthMult 7::fLegsValueMult
		Let ArmSt[5] := ar_Map 0::sShldARBase 1::fShldWeightBase 2::sShldHealthBase 3::lShldValueBase 4::sShldARMult 5::fShldWeightMult 6::fShldHealthMult 7::fShldValueMult

		;Set names
		Let str_BodyName := Call aaZefirosSetname str_Prefix str_Postfix sBodyFix str_BodyName
		Let str_FootName := Call aaZefirosSetname str_Prefix str_Postfix sFootFix str_FootName
		Let str_HandName := Call aaZefirosSetname str_Prefix str_Postfix sHandFix str_HandName
		Let str_HeadName := Call aaZefirosSetname str_Prefix str_Postfix sHeadFix str_HeadName
		Let str_LegsName := Call aaZefirosSetname str_Prefix str_Postfix sLegsFix str_LegsName
		Let str_ShldName := Call aaZefirosSetname str_Prefix str_Postfix sShldFix str_ShldName
		
		SetName $str_BodyName SelfBody
		SetName $str_FootName SelfFoot
		SetName $str_HandName SelfHand
		SetName $str_HeadName SelfHead
		SetName $str_LegsName SelfLegs
		SetName $str_ShldName SelfShld

		;Set collective name that appears in messages
		if ( 0 == sv_Length str_Prefix )

			DebugPrint "str_Prefix is empty, using str_Postfix."
			Let MsgName := "Armor " + str_Postfix

		else

			DebugPrint "Using str_Prefix."
			Let MsgName := str_Prefix

		endif

		;Set latency during GameMode/MenuMode
		Let ScriptLag := 0.5
		Let MenuLag := 0.01
		Let OneFrame := 0.00000000001

		;Set DamageAnalysis variables
		Let aaZefirosDmgAnal.fQuestDelayTime := fDamageLag
		Let aaZefirosDmgAnal.ParaXP := sXPPara * fDamageLag

		;DoOnce flags
		Let HalfOnce := 0
		Let CapOnce := 0
		Let BreakOnce := 0
		Let SeekOnce := 0
		Let RefreshOnce := 0


		;-----------------------------------------------------------------------------
		;Set permanent handlers
		;-----------------------------------------------------------------------------
		Call aaZefirosSetEquipHandlers Player Selfs

		
		;-----------------------------------------------------------------------------
		;Add to Player on first start up
		;-----------------------------------------------------------------------------
		if ( aaZefirosLevel == 0 )

			Player.AddItemNS SelfBody 1
			Player.AddItemNS SelfFoot 1
			Player.AddItemNS SelfHand 1
			Player.AddItemNS SelfHead 1
			Player.AddItemNS SelfLegs 1
			Player.AddItemNS SelfShld 1

			;1 is heavy, 0 is light
			Let aaZefirosWeightBody := 1
			Let aaZefirosWeightFoot := 1
			Let aaZefirosWeightHand := 1
			Let aaZefirosWeightHead := 1
			Let aaZefirosWeightLegs := 1
			Let aaZefirosWeightShld := 1
			
			Let aaZefirosLevel := 1

			Call aaZefirosSetFlavorMessage ( "Icons\" + Call aaZefirosGetPCBIP SelfBody ) "" MsgName 0 12

		endif

		
		;-----------------------------------------------------------------------------
		;Set armor stats
		;-----------------------------------------------------------------------------
		ForEach Item <- Selfs

			Let Val := *Item
			SetArmorType 0 Val

		loop

		Let Stack := ar_Map 0::aaZefirosWeightBody 1::aaZefirosWeightFoot 2::aaZefirosWeightHand 3::aaZefirosWeightHead 4::aaZefirosWeightLegs 5::aaZefirosWeightShld

		Let Num := 0
		while ( Num < 6 )

			Call aaZefirosSetStat ArmSt[Num][0] ArmSt[Num][1] ArmSt[Num][2] ArmSt[Num][3] ArmSt[Num][4] ArmSt[Num][5] ArmSt[Num][6] ArmSt[Num][7] aaZefirosLevel Selfs[Num]
			Call aaZefirosSetWeight fHeavyAR fHeavyWeight Stack[Num] Selfs[Num]

			Let Num += 1
		loop
		
		Let Num := 0
		Let Stack := ar_Null


		;-----------------------------------------------------------------------------
		;Set Level and XP
		;-----------------------------------------------------------------------------
		Let Level := aaZefirosLevel

		;Set levelcap flag
		if ( aaZefirosLevel >= sLevelCap )

			Let CapOnce := 1

		endif

		;XPReq is modified within the function, halfway point returned
		Let XPReqHalf := Call aaZefirosSetXPReq sXPReqBase sXPReqMult aaZefirosLevel


		;-----------------------------------------------------------------------------
		;Rebuild Enchantments
		;-----------------------------------------------------------------------------
		;Reset enchantments
		ForEach Item <- Enchs

			Let Val := *Item
			RemoveAllEffectItems Val

		loop

		;Purge from armor
		ForEach Item <- Selfs

			Let Val := *Item
			RemoveEnchantment Val

		loop

		;Build enchantments
		if ( aaZefirosLevel >= sEnchStart )

			Let Stack := Call aaZefirosGetEnchantLevels 0
			Call aaZefirosSetEnchant EncSt Stack aaZefirosActvEnchBody EnchBody
			
			Let Stack := Call aaZefirosGetEnchantLevels 1
			Call aaZefirosSetEnchant EncSt Stack aaZefirosActvEnchFoot EnchFoot
			
			Let Stack := Call aaZefirosGetEnchantLevels 2
			Call aaZefirosSetEnchant EncSt Stack aaZefirosActvEnchHand EnchHand
			
			Let Stack := Call aaZefirosGetEnchantLevels 3
			Call aaZefirosSetEnchant EncSt Stack aaZefirosActvEnchHead EnchHead
			
			Let Stack := Call aaZefirosGetEnchantLevels 4
			Call aaZefirosSetEnchant EncSt Stack aaZefirosActvEnchLegs EnchLegs
			
			Let Stack := Call aaZefirosGetEnchantLevels 5
			Call aaZefirosSetEnchant EncSt Stack aaZefirosActvEnchShld EnchShld
			
			Let Stack := ar_Null
			Let sEnchResist := 1

		endif
	

		;-----------------------------------------------------------------------------
		;Set Resistances
		;-----------------------------------------------------------------------------
		if ( sXPResist > 0 )

			Let ResistFI := NewFI := aaZefirosRXPFire / sXPResist
			Let ResistFR := NewFR := aaZefirosRXPFrost / sXPResist
			Let ResistSH := NewSH := aaZefirosRXPShock / sXPResist
			Let ResistMA := NewMA := aaZefirosRXPMagic / sXPResist
			Let ResistNW := NewNW := aaZefirosRXPNormal / sXPResist
			Let ResistPA := NewPA := aaZefirosRXPParalysis / sXPResist
			Let ResistDI := NewDI := aaZefirosRXPDisease / sXPResist

			Call aaZefirosSetResists ResistFI ResistFR ResistSH ResistMA ResistNW ResistPA ResistDI Enchs[0:4]

		endif

		if ( sEnchResist != 0 )

			Call aaZefirosSetEnchOnItem Enchs Selfs

		endif

		;All changes will not be applied until the items are re-equipped
		Call aaZefirosRefreshEquipped Player Selfs


		;-----------------------------------------------------------------------------
		printc "%z%B initialized!%b" MsgName
		;-----------------------------------------------------------------------------


	;-----------------------------------------------------------------------------
	endif ;( GetGameLoaded )
	;-----------------------------------------------------------------------------

	;-----------------------------------------------------------------------------
	;Set debug mode
	;-----------------------------------------------------------------------------
	SetDebugMode aaZefirosDebug

	;-----------------------------------------------------------------------------
	;Set script lag
	;-----------------------------------------------------------------------------
	if ( fQuestDelayTime != ScriptLag && SeekOnce == 0 && RefreshOnce == 0 )
	
			Set fQuestDelayTime to ScriptLag
	
	endif

	;-----------------------------------------------------------------------------
	;Log XP from combat
	;-----------------------------------------------------------------------------
	if ( aaZefirosXPLog == 1 && Player.IsInCombat == 0 )

		Call aaZefirosLogXP ( aaZefirosXP - aaZefirosXPCombat ) "Damage taken."
		Let aaZefirosXPLog := 0

	endif

	;-----------------------------------------------------------------------------
	;Update resistances
	;-----------------------------------------------------------------------------
	if ( sXPResist > 0 )
	;-----------------------------------------------------------------------------
	
		Let NewFI := aaZefirosRXPFire / sXPResist
		Let NewFR := aaZefirosRXPFrost / sXPResist
		Let NewSH := aaZefirosRXPShock / sXPResist
		Let NewMa := aaZefirosRXPMagic / sXPResist
		Let NewNW := aaZefirosRXPNormal / sXPResist
		Let NewPA := aaZefirosRXPParalysis / sXPResist
		Let NewDI := aaZefirosRXPDisease / sXPResist

		if ( NewFI != ResistFI )

			DebugPrint "Updating Resist Fire..."
			
			Let ResistFI := NewFI

			ForEach Item <- Enchs[0:4]

				Call aaZefirosSetEffectItem ResistFI 0 0 0 ( GetMagicEffectCode RSFI ) 256 Item["value"]

			loop
			
			DebugPrint "Resist Fire updated."

		endif

		if ( NewFR != ResistFR )

			DebugPrint "Updating Resist Frost..."
			
			Let ResistFR := NewFR

			ForEach Item <- Enchs[0:4]

				Call aaZefirosSetEffectItem ResistFR 0 0 0 ( GetMagicEffectCode RSFR ) 256 Item["value"]

			loop
			
			DebugPrint "Resist Frost updated."

		endif

		if ( NewSH != ResistSH )

			DebugPrint "Updating Resist Shock..."
			
			Let ResistSH := NewSH

			ForEach Item <- Enchs[0:4]

				Call aaZefirosSetEffectItem ResistSH 0 0 0 ( GetMagicEffectCode RSSH ) 256 Item["value"]

			loop
			
			DebugPrint "Resist Shock updated."

		endif

		if ( NewMA != ResistMA )

			DebugPrint "Updating Resist Magic..."
			
			Let ResistMA := NewMA

			ForEach Item <- Enchs[0:4]

				Call aaZefirosSetEffectItem ResistMA 0 0 0 ( GetMagicEffectCode RSMA ) 256 Item["value"]

			loop
			
			DebugPrint "Resist Magic updated."

		endif

		if ( NewNW != ResistNW )

			DebugPrint "Updating Resist Normal Weapons..."
			
			Let ResistNW := NewNW

			ForEach Item <- Enchs[0:4]

				Call aaZefirosSetEffectItem ResistNW 0 0 0 ( GetMagicEffectCode RSNW ) 256 Item["value"]

			loop
			
			DebugPrint "Resist Normal Weapons updated."

		endif

		if ( NewPA != ResistPA )

			DebugPrint "Updating Resist Paralysis..."
			
			Let ResistPA := NewPA

			ForEach Item <- Enchs[0:4]

				Call aaZefirosSetEffectItem ResistPA 0 0 0 ( GetMagicEffectCode RSPA ) 256 Item["value"]

			loop
			
			DebugPrint "Resist Paralysis updated."

		endif

		if ( NewDI != ResistDI )

			DebugPrint "Updating Resist Disease..."
			
			Let ResistDI := NewDI

			ForEach Item <- Enchs[0:4]

				Call aaZefirosSetEffectItem ResistDI 0 0 0 ( GetMagicEffectCode RSDI ) 256 Item["value"]

			loop
			
			DebugPrint "Resist Disease updated."

		endif

	;-----------------------------------------------------------------------------
	endif ;( sXPResist > 0 )
	;-----------------------------------------------------------------------------

	;-----------------------------------------------------------------------------
	;Enchant Seek
	;-----------------------------------------------------------------------------
	if ( SeekOnce > 0 )
	;-----------------------------------------------------------------------------

		if ( SeekOnce == 1 )
	
			;Greatly speed up the script so menus are responsive
			Let fQuestDelayTime := MenuLag
			Let Item := ar_Map 0::-1 1::0
			Let SeekOnce := 2
			
		endif

		
		;-----------------------------------------------------------------------------
		;Seek Body enchantment
		;-----------------------------------------------------------------------------
		if ( SeekOnce == 2 )
	
			Let Item := Call aaZefirosGetEnchChoice str_BodyName 0 Item[0] Item[1]
	
			if eval( Item[1] == -1 )
	
				Let aaZefirosActvEnchBody := Item[0]
				Let Num := Call aaZefirosSetEnchLevel 0 0 aaZefirosActvEnchBody
				Let Item := Call aaZefirosSetEffectStat EncSt[aaZefirosActvEnchBody][2] EncSt[aaZefirosActvEnchBody][3] EncSt[aaZefirosActvEnchBody][4] EncSt[aaZefirosActvEnchBody][5] EncSt[aaZefirosActvEnchBody][6] EncSt[aaZefirosActvEnchBody][7] Num
				Call aaZefirosSetEffectItem Item[0] Item[1] Item[2] EncSt[aaZefirosActvEnchBody][8] EncSt[aaZefirosActvEnchBody][0] EncSt[aaZefirosActvEnchBody][1] EnchBody
	
				Let Item := ar_Map 0::-1 1::0
				Let SeekOnce := 3
	
			endif
	
		endif

		
		;-----------------------------------------------------------------------------
		;Seek Foot enchantment
		;-----------------------------------------------------------------------------
		if ( SeekOnce == 3 )
	
			Let Item := Call aaZefirosGetEnchChoice str_FootName 0 Item[0] Item[1]
	
			if eval( Item[1] == -1 )
	
				Let aaZefirosActvEnchFoot := Item[0]
				Let Num := Call aaZefirosSetEnchLevel 1 0 aaZefirosActvEnchFoot
				Let Item := Call aaZefirosSetEffectStat EncSt[aaZefirosActvEnchFoot][2] EncSt[aaZefirosActvEnchFoot][3] EncSt[aaZefirosActvEnchFoot][4] EncSt[aaZefirosActvEnchFoot][5] EncSt[aaZefirosActvEnchFoot][6] EncSt[aaZefirosActvEnchFoot][7] Num
				Call aaZefirosSetEffectItem Item[0] Item[1] Item[2] EncSt[aaZefirosActvEnchFoot][8] EncSt[aaZefirosActvEnchFoot][0] EncSt[aaZefirosActvEnchFoot][1] EnchFoot
	
				Let Item := ar_Map 0::-1 1::0
				Let SeekOnce := 4
	
			endif
	
		endif

		
		;-----------------------------------------------------------------------------
		;Seek Hand enchantment
		;-----------------------------------------------------------------------------
		if ( SeekOnce == 4 )
	
			Let Item := Call aaZefirosGetEnchChoice str_HandName 0 Item[0] Item[1]
	
			if eval( Item[1] == -1 )
	
				Let aaZefirosActvEnchHand := Item[0]
				Let Num := Call aaZefirosSetEnchLevel 2 0 aaZefirosActvEnchHand
				Let Item := Call aaZefirosSetEffectStat EncSt[aaZefirosActvEnchHand][2] EncSt[aaZefirosActvEnchHand][3] EncSt[aaZefirosActvEnchHand][4] EncSt[aaZefirosActvEnchHand][5] EncSt[aaZefirosActvEnchHand][6] EncSt[aaZefirosActvEnchHand][7] Num
				Call aaZefirosSetEffectItem Item[0] Item[1] Item[2] EncSt[aaZefirosActvEnchHand][8] EncSt[aaZefirosActvEnchHand][0] EncSt[aaZefirosActvEnchHand][1] EnchHand
	
				Let Item := ar_Map 0::-1 1::0
				Let SeekOnce := 5
	
			endif
	
		endif

		
		;-----------------------------------------------------------------------------
		;Seek Head enchantment
		;-----------------------------------------------------------------------------
		if ( SeekOnce == 5 )
	
			Let Item := Call aaZefirosGetEnchChoice str_HeadName 0 Item[0] Item[1]
	
			if eval( Item[1] == -1 )
	
				Let aaZefirosActvEnchHead := Item[0]
				Let Num := Call aaZefirosSetEnchLevel 3 0 aaZefirosActvEnchHead
				Let Item := Call aaZefirosSetEffectStat EncSt[aaZefirosActvEnchHead][2] EncSt[aaZefirosActvEnchHead][3] EncSt[aaZefirosActvEnchHead][4] EncSt[aaZefirosActvEnchHead][5] EncSt[aaZefirosActvEnchHead][6] EncSt[aaZefirosActvEnchHead][7] Num
				Call aaZefirosSetEffectItem Item[0] Item[1] Item[2] EncSt[aaZefirosActvEnchHead][8] EncSt[aaZefirosActvEnchHead][0] EncSt[aaZefirosActvEnchHead][1] EnchHead
	
				Let Item := ar_Map 0::-1 1::0
				Let SeekOnce := 6
	
			endif
	
		endif

		
		;-----------------------------------------------------------------------------
		;Seek Legs enchantment
		;-----------------------------------------------------------------------------
		if ( SeekOnce == 6 )
	
			Let Item := Call aaZefirosGetEnchChoice str_LegsName 0 Item[0] Item[1]
	
			if eval( Item[1] == -1 )
	
				Let aaZefirosActvEnchLegs := Item[0]
				Let Num := Call aaZefirosSetEnchLevel 4 0 aaZefirosActvEnchLegs
				Let Item := Call aaZefirosSetEffectStat EncSt[aaZefirosActvEnchLegs][2] EncSt[aaZefirosActvEnchLegs][3] EncSt[aaZefirosActvEnchLegs][4] EncSt[aaZefirosActvEnchLegs][5] EncSt[aaZefirosActvEnchLegs][6] EncSt[aaZefirosActvEnchLegs][7] Num
				Call aaZefirosSetEffectItem Item[0] Item[1] Item[2] EncSt[aaZefirosActvEnchLegs][8] EncSt[aaZefirosActvEnchLegs][0] EncSt[aaZefirosActvEnchLegs][1] EnchLegs
	
				Let Item := ar_Map 0::-1 1::0
				Let SeekOnce := 7
	
			endif
	
		endif

		
		;-----------------------------------------------------------------------------
		;Seek Shld enchantment
		;-----------------------------------------------------------------------------
		if ( SeekOnce == 7 )
	
			Let Item := Call aaZefirosGetEnchChoice str_ShldName 1 Item[0] Item[1]
	
			if eval( Item[1] == -1 )
	
				Let aaZefirosActvEnchShld := Item[0]
				Let Num := Call aaZefirosSetEnchLevel 5 0 aaZefirosActvEnchShld
				Let Item := Call aaZefirosSetEffectStat EncSt[aaZefirosActvEnchShld][2] EncSt[aaZefirosActvEnchShld][3] EncSt[aaZefirosActvEnchShld][4] EncSt[aaZefirosActvEnchShld][5] EncSt[aaZefirosActvEnchShld][6] EncSt[aaZefirosActvEnchShld][7] Num
				Call aaZefirosSetEffectItem Item[0] Item[1] Item[2] EncSt[aaZefirosActvEnchShld][8] EncSt[aaZefirosActvEnchShld][0] EncSt[aaZefirosActvEnchShld][1] EnchShld
	
				Let Item := ar_Map 0::-1 1::0
				Let SeekOnce := 8
	
			endif
	
		endif

		
		;-----------------------------------------------------------------------------
		;Clean up
		;-----------------------------------------------------------------------------
		if ( SeekOnce == 8 )

			Call aaZefirosSetEnchOnItem Enchs Selfs
			Let Item := ar_Null
			Let Num := 0
			if ( Level == aaZefirosLevel )
				Let RefreshOnce := 1
			endif
			Let SeekOnce := 0

		endif

		
	;-----------------------------------------------------------------------------
	endif ;( SeekOnce > 0 )
	;-----------------------------------------------------------------------------

	;-----------------------------------------------------------------------------
	;Level Up
	;-----------------------------------------------------------------------------
	while ( aaZefirosLevel < sLevelCap && aaZefirosXP >= aaZefirosXPReq )

		Let aaZefirosLevel += 1

		;Set XPReq
		Let XPReqHalf := Call aaZefirosSetXPReq sXPReqBase sXPReqMult aaZefirosLevel
		Let HalfOnce := 0

	loop

	;-----------------------------------------------------------------------------
	;Apply level changes
	;-----------------------------------------------------------------------------
	if ( Level != aaZefirosLevel && SeekOnce == 0 )
	;-----------------------------------------------------------------------------
	;Includes some redundant flag checks with Level up block so flags are set properly if aaZefirosLevel is modified directly

		;The value Level will become
		Let Nmb := aaZefirosLevel


		;-----------------------------------------------------------------------------
		;Mod active enchantments
		;-----------------------------------------------------------------------------
		if ( aaZefirosLevel >= sEnchStart )

			;Check if at or passed a Seek level
			if ( Level + sEnchSeek - ( ( Level - sEnchStart ) % sEnchSeek ) <= aaZefirosLevel )

				Let SeekOnce := 1

				if ( Level < sEnchStart )

					Let Nmb := sEnchStart

				else

					Let Nmb := Level + sEnchSeek - ( ( Level - sEnchStart ) % sEnchSeek )

				endif

			endif

			;Skip increment if no enchantments exist already
			if ( Level >= sEnchStart )

				Let Num := Call aaZefirosSetEnchLevel 0 ( Nmb - Level ) aaZefirosActvEnchBody
				Let Item := Call aaZefirosSetEffectStat EncSt[aaZefirosActvEnchBody][2] EncSt[aaZefirosActvEnchBody][3] EncSt[aaZefirosActvEnchBody][4] EncSt[aaZefirosActvEnchBody][5] EncSt[aaZefirosActvEnchBody][6] EncSt[aaZefirosActvEnchBody][7] Num
				Call aaZefirosSetEffectItem Item[0] Item[1] Item[2] EncSt[aaZefirosActvEnchBody][8] EncSt[aaZefirosActvEnchBody][0] EncSt[aaZefirosActvEnchBody][1] EnchBody
		
				Let Num := Call aaZefirosSetEnchLevel 1 ( Nmb - Level ) aaZefirosActvEnchFoot
				Let Item := Call aaZefirosSetEffectStat EncSt[aaZefirosActvEnchFoot][2] EncSt[aaZefirosActvEnchFoot][3] EncSt[aaZefirosActvEnchFoot][4] EncSt[aaZefirosActvEnchFoot][5] EncSt[aaZefirosActvEnchFoot][6] EncSt[aaZefirosActvEnchFoot][7] Num
				Call aaZefirosSetEffectItem Item[0] Item[1] Item[2] EncSt[aaZefirosActvEnchFoot][8] EncSt[aaZefirosActvEnchFoot][0] EncSt[aaZefirosActvEnchFoot][1] EnchFoot
		
				Let Num := Call aaZefirosSetEnchLevel 2 ( Nmb - Level ) aaZefirosActvEnchHand
				Let Item := Call aaZefirosSetEffectStat EncSt[aaZefirosActvEnchHand][2] EncSt[aaZefirosActvEnchHand][3] EncSt[aaZefirosActvEnchHand][4] EncSt[aaZefirosActvEnchHand][5] EncSt[aaZefirosActvEnchHand][6] EncSt[aaZefirosActvEnchHand][7] Num
				Call aaZefirosSetEffectItem Item[0] Item[1] Item[2] EncSt[aaZefirosActvEnchHand][8] EncSt[aaZefirosActvEnchHand][0] EncSt[aaZefirosActvEnchHand][1] EnchHand
		
				Let Num := Call aaZefirosSetEnchLevel 3 ( Nmb - Level ) aaZefirosActvEnchHead
				Let Item := Call aaZefirosSetEffectStat EncSt[aaZefirosActvEnchHead][2] EncSt[aaZefirosActvEnchHead][3] EncSt[aaZefirosActvEnchHead][4] EncSt[aaZefirosActvEnchHead][5] EncSt[aaZefirosActvEnchHead][6] EncSt[aaZefirosActvEnchHead][7] Num
				Call aaZefirosSetEffectItem Item[0] Item[1] Item[2] EncSt[aaZefirosActvEnchHead][8] EncSt[aaZefirosActvEnchHead][0] EncSt[aaZefirosActvEnchHead][1] EnchHead
		
				Let Num := Call aaZefirosSetEnchLevel 4 ( Nmb - Level ) aaZefirosActvEnchLegs
				Let Item := Call aaZefirosSetEffectStat EncSt[aaZefirosActvEnchLegs][2] EncSt[aaZefirosActvEnchLegs][3] EncSt[aaZefirosActvEnchLegs][4] EncSt[aaZefirosActvEnchLegs][5] EncSt[aaZefirosActvEnchLegs][6] EncSt[aaZefirosActvEnchLegs][7] Num
				Call aaZefirosSetEffectItem Item[0] Item[1] Item[2] EncSt[aaZefirosActvEnchLegs][8] EncSt[aaZefirosActvEnchLegs][0] EncSt[aaZefirosActvEnchLegs][1] EnchLegs
	
				Let Num := Call aaZefirosSetEnchLevel 5 ( Nmb - Level ) aaZefirosActvEnchShld
				Let Item := Call aaZefirosSetEffectStat EncSt[aaZefirosActvEnchShld][2] EncSt[aaZefirosActvEnchShld][3] EncSt[aaZefirosActvEnchShld][4] EncSt[aaZefirosActvEnchShld][5] EncSt[aaZefirosActvEnchShld][6] EncSt[aaZefirosActvEnchShld][7] Num
				Call aaZefirosSetEffectItem Item[0] Item[1] Item[2] EncSt[aaZefirosActvEnchShld][8] EncSt[aaZefirosActvEnchShld][0] EncSt[aaZefirosActvEnchShld][1] EnchShld

				Let Num := 0
				Let Item := ar_Null

			endif
			
		;-----------------------------------------------------------------------------
		;If regressing to below sEnchStart, purge enchantments
		;-----------------------------------------------------------------------------
		elseif ( aaZefirosLevel < sEnchStart && sEnchStart <= Level )

			ForEach Item <- Enchs

				Let Val := *Item
				RemoveAllEffectItems Val

			loop

			ForEach Item <- Selfs

				Let Val := *Item
				RemoveEnchantment Val

			loop
			Let Val := 0

			;Reinstate dynamic resistances
			if ( sXPResist > 0 )

				Call aaZefirosSetResists ResistFI ResistFR ResistSH ResistMA ResistNW ResistPA ResistDI Enchs[0:4]

			endif

			;Reset globals
			Call aaZefirosSetEnchLevel -1 0 0

		endif

		
		;-----------------------------------------------------------------------------
		;Mod armor stats
		;-----------------------------------------------------------------------------
		Let Stack := ar_Map 0::aaZefirosWeightBody 1::aaZefirosWeightFoot 2::aaZefirosWeightHand 3::aaZefirosWeightHead 4::aaZefirosWeightLegs 5::aaZefirosWeightShld

		Let Num := 0
		while ( Num < 6 )

			Call aaZefirosModStat ArmSt[Num] fHeavyAR fHeavyWeight Stack[Num] Level Nmb Selfs[Num]

			Let Num += 1
		loop

		Let Num := 0
		Let Stack := ar_Null

		
		;-----------------------------------------------------------------------------
		;Flavor text
		;-----------------------------------------------------------------------------
		;Only output text once Level has caught up to aaZefirosLevel
		if ( aaZefirosLevel == Nmb )

			if ( Nmb == 1 )

				;De-level to 1
				Call aaZefirosSetFlavorBox MsgName 1

			elseif ( Nmb >= sLevelCap && CapOnce == 0 )
	
				;Level cap
				Let CapOnce := 1
				Call aaZefirosSetFlavorBox MsgName 0
	
			elseif ( Nmb - Level > 0 )

				;Level up
				Call aaZefirosSetFlavorMessage ( "Icons\" + Call aaZefirosGetPCBIP SelfBody ) "" MsgName 1 8
	
			else
	
				;Level down
				Call aaZefirosSetFlavorBox MsgName 2
	
			endif

		endif

		
		;-----------------------------------------------------------------------------
		;Log Level change
		;-----------------------------------------------------------------------------
		Let Level := Nmb
		Call aaZefirosLogLevel MsgName Level

		if ( SeekOnce == 0 )

			Let RefreshOnce := 1 ;Flag is otherwise set by Seek code

		endif


	;-----------------------------------------------------------------------------
	endif ;( Level != aaZefirosLevel )
	;-----------------------------------------------------------------------------

	;-----------------------------------------------------------------------------
	;Halfway message
	;-----------------------------------------------------------------------------
	if ( CapOnce == 0 && HalfOnce == 0 && aaZefirosXP >= XPReqHalf )

		Call aaZefirosSetFlavorMessage ( "Icons\" + Call aaZefirosGetPCBIP SelfBody ) "" MsgName 2 4
		Let HalfOnce := 1

	endif
	
	;-----------------------------------------------------------------------------
	;Refresh Equipped Items
	;-----------------------------------------------------------------------------
	;Has to be inverted order so they don't occur on the same frame
	;If they occur on the same frame, EquipItem fails
	if ( RefreshOnce == 3 )

		Call aaZefirosRefreshEquip Player Equip
		Let Equip := ar_Null
		Let RefreshOnce := 0

	endif
	
	if ( RefreshOnce == 2 )

		Let Equip := Call aaZefirosRefreshUnEquip Player Selfs
		Let RefreshOnce := 3

	endif

	if ( RefreshOnce == 1 )

		Let fQuestDelayTime := OneFrame
		Let RefreshOnce := 2

	endif

;-----------------------------------------------------------------------------
end ;GameMode
;-----------------------------------------------------------------------------
