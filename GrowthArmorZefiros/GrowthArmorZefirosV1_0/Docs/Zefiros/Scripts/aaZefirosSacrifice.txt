scn aaZefirosSacrifice

;Main script
;-----------------------------------------------------------------------------
;aaZefirosManager
;-----------------------------------------------------------------------------

;Used scripts
;-----------------------------------------------------------------------------
;aaZefirosGetSlotShared
;aaZefirosLogXP
;aaZefirosRefreshInv
;aaZefirosFlavorMessage
;-----------------------------------------------------------------------------

;Related scripts
;-----------------------------------------------------------------------------
;aaZefirosOffer
;-----------------------------------------------------------------------------

;Used globals
;-----------------------------------------------------------------------------
;aaZefirosXP
;aaZefirosXPLog
;aaZefirosXPCombat
;-----------------------------------------------------------------------------

;Related globals
;-----------------------------------------------------------------------------
;-----------------------------------------------------------------------------

;Description
;-----------------------------------------------------------------------------
;Converts Item's durability into XP and health for Armr at a rate of Asbor.
;One item in Armr gains the converted health, the one which shares a slot with
;Item.  Because not all slots are covered by Armr, Legs also covers Tail, Shld
;also covers jewelery.
;Calls SetFlavorMessage when the deed is done.
;-----------------------------------------------------------------------------

;Parameters
;-----------------------------------------------------------------------------
float Absor
ref Item
array_var Armr

array_var Stack
ref Self
ref Temp
string_var Msg
float Health
short Count
float XP
;-----------------------------------------------------------------------------

;-----------------------------------------------------------------------------
begin Function { Absor, Item, Armr }
;-----------------------------------------------------------------------------

	;-----------------------------------------------------------------------------
	;Get which object in Armr shares a slot with Item
	;-----------------------------------------------------------------------------
	Let Stack := ar_Map 0::Armr[3] 1::Armr[0] 2::Armr[4] 3::Armr[2] 4::Armr[1] 5::Armr[5] 6::Armr[5] 7::Armr[5] 8::Armr[5] 9::Armr[5] 10::Armr[4]
	Let Stack := Call aaZefirosGetSlotShared Item Stack
	;All slots are accounted for in ar_Map, so Stack cannot return empty
	Let Self := Stack[0]


	;-----------------------------------------------------------------------------
	;Get first inventory reference to Self
	;-----------------------------------------------------------------------------
	Let Stack := Player.GetInvRefsForItem Self
	if eval( 0 == ar_Size Stack )

		DebugPrint "%n missing from inventory, aborting Sacrifice." Self
		Let Msg := "No item present can take " + $Item + "."
		MessageBox $Msg
		sv_Destruct Msg
		Return

	endif
	Let Self := Stack[0]


	;-----------------------------------------------------------------------------
	;Record health of first inventory reference to Item and remove one instance
	;-----------------------------------------------------------------------------
	Let Stack := Player.GetInvRefsForItem Item
	Let Temp := Stack[0]
	Let Health := Temp.GetCurrentHealth
	Let Count := Temp.GetRefCount

	Temp.RemoveMeIR
	if ( Count > 1 )

		Let Count -= 1

		Let Temp := CreateTempRef Item
		Temp.SetRefCount Count
		Temp.SetCurrentHealth Health
		Temp.CopyIR Player

	endif


	;-----------------------------------------------------------------------------
	;Add XP
	;-----------------------------------------------------------------------------
	Let XP := Absor * Health
	Let aaZefirosXP += XP
	if ( aaZefirosXPLog == 1 )
		Let aaZefirosXPCombat += XP ;Ensure this XP isn't counted in combat log.
	endif
	Let Msg := $Item + " offered."
	Call aaZefirosLogXP XP Msg
	sv_Destruct Msg


	;-----------------------------------------------------------------------------
	;Add health to Self
	;-----------------------------------------------------------------------------
	Let XP += Self.GetCurrentHealth
	Self.SetCurrentHealth XP


	;-----------------------------------------------------------------------------
	;Refresh UI and send flavor message
	;-----------------------------------------------------------------------------
	Call aaZefirosRefreshInv
	Call aaZefirosFlavorMessage ( "Icons\" + Call aaZefirosGetPCBIP Item ) "UIArmorWeaponRepairBreak" $Self $Item 3 4


	Return
;-----------------------------------------------------------------------------
end ;Function { Absor, Item, Armr }
;-----------------------------------------------------------------------------